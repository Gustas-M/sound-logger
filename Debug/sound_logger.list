
sound_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d74  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08002f08  08002f08  00003f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003124  08003124  00005098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003124  08003124  00004124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800312c  0800312c  00005098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800312c  0800312c  0000412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003130  08003130  00004130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08003134  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000098  080031cc  00005098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080031cc  000050cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b30  00000000  00000000  000050c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fcb  00000000  00000000  0000dbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0000fbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000622  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184f2  00000000  00000000  00010a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a120  00000000  00000000  00028f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000949f2  00000000  00000000  00033074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7a66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002100  00000000  00000000  000c7aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000c9bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000098 	.word	0x20000098
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002ef0 	.word	0x08002ef0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000009c 	.word	0x2000009c
 80001d0:	08002ef0 	.word	0x08002ef0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050e:	2b00      	cmp	r3, #0
 8000510:	db0b      	blt.n	800052a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	f003 021f 	and.w	r2, r3, #31
 8000518:	4907      	ldr	r1, [pc, #28]	@ (8000538 <__NVIC_EnableIRQ+0x38>)
 800051a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051e:	095b      	lsrs	r3, r3, #5
 8000520:	2001      	movs	r0, #1
 8000522:	fa00 f202 	lsl.w	r2, r0, r2
 8000526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000e100 	.word	0xe000e100

0800053c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	6039      	str	r1, [r7, #0]
 8000546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054c:	2b00      	cmp	r3, #0
 800054e:	db0a      	blt.n	8000566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	b2da      	uxtb	r2, r3
 8000554:	490c      	ldr	r1, [pc, #48]	@ (8000588 <__NVIC_SetPriority+0x4c>)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	0112      	lsls	r2, r2, #4
 800055c:	b2d2      	uxtb	r2, r2
 800055e:	440b      	add	r3, r1
 8000560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000564:	e00a      	b.n	800057c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4908      	ldr	r1, [pc, #32]	@ (800058c <__NVIC_SetPriority+0x50>)
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	f003 030f 	and.w	r3, r3, #15
 8000572:	3b04      	subs	r3, #4
 8000574:	0112      	lsls	r2, r2, #4
 8000576:	b2d2      	uxtb	r2, r2
 8000578:	440b      	add	r3, r1
 800057a:	761a      	strb	r2, [r3, #24]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	e000e100 	.word	0xe000e100
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <LL_ADC_DMA_GetRegAddr>:

  return data_reg_addr;
}
#else
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument compilation warning */
  (void)Register;

  /* Retrieve address of register DR */
  return (uint32_t) & (ADCx->DR);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	334c      	adds	r3, #76	@ 0x4c
}
 800059e:	4618      	mov	r0, r3
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV6
  *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	431a      	orrs	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	605a      	str	r2, [r3, #4]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	@ 0x24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	332c      	adds	r3, #44	@ 0x2c
 80005e0:	4619      	mov	r1, r3
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80005e8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80005ec:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	fa92 f2a2 	rbit	r2, r2
 80005f4:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	61ba      	str	r2, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80005fa:	69ba      	ldr	r2, [r7, #24]
 80005fc:	2a00      	cmp	r2, #0
 80005fe:	d101      	bne.n	8000604 <LL_ADC_REG_SetSequencerRanks+0x34>
  {
    return 32U;
 8000600:	2220      	movs	r2, #32
 8000602:	e003      	b.n	800060c <LL_ADC_REG_SetSequencerRanks+0x3c>
  }
  return __builtin_clz(value);
 8000604:	69ba      	ldr	r2, [r7, #24]
 8000606:	fab2 f282 	clz	r2, r2
 800060a:	b2d2      	uxtb	r2, r2
 800060c:	40d3      	lsrs	r3, r2
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	440b      	add	r3, r1
 8000612:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	f003 031f 	and.w	r3, r3, #31
 800061e:	211f      	movs	r1, #31
 8000620:	fa01 f303 	lsl.w	r3, r1, r3
 8000624:	43db      	mvns	r3, r3
 8000626:	401a      	ands	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f003 011f 	and.w	r1, r3, #31
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	f003 031f 	and.w	r3, r3, #31
 8000634:	fa01 f303 	lsl.w	r3, r1, r3
 8000638:	431a      	orrs	r2, r3
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800063e:	bf00      	nop
 8000640:	3724      	adds	r7, #36	@ 0x24
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800064a:	b480      	push	{r7}
 800064c:	b08f      	sub	sp, #60	@ 0x3c
 800064e:	af00      	add	r7, sp, #0
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	60b9      	str	r1, [r7, #8]
 8000654:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	330c      	adds	r3, #12
 800065a:	4619      	mov	r1, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000662:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000666:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	fa92 f2a2 	rbit	r2, r2
 800066e:	613a      	str	r2, [r7, #16]
  return result;
 8000670:	693a      	ldr	r2, [r7, #16]
 8000672:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8000674:	69ba      	ldr	r2, [r7, #24]
 8000676:	2a00      	cmp	r2, #0
 8000678:	d101      	bne.n	800067e <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 800067a:	2220      	movs	r2, #32
 800067c:	e003      	b.n	8000686 <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 800067e:	69ba      	ldr	r2, [r7, #24]
 8000680:	fab2 f282 	clz	r2, r2
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	40d3      	lsrs	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	440b      	add	r3, r1
 800068c:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 800068e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000698:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800069c:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800069e:	6a39      	ldr	r1, [r7, #32]
 80006a0:	fa91 f1a1 	rbit	r1, r1
 80006a4:	61f9      	str	r1, [r7, #28]
  return result;
 80006a6:	69f9      	ldr	r1, [r7, #28]
 80006a8:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 80006aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80006ac:	2900      	cmp	r1, #0
 80006ae:	d101      	bne.n	80006b4 <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 80006b0:	2120      	movs	r1, #32
 80006b2:	e003      	b.n	80006bc <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 80006b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80006b6:	fab1 f181 	clz	r1, r1
 80006ba:	b2c9      	uxtb	r1, r1
 80006bc:	40cb      	lsrs	r3, r1
 80006be:	2107      	movs	r1, #7
 80006c0:	fa01 f303 	lsl.w	r3, r1, r3
 80006c4:	43db      	mvns	r3, r3
 80006c6:	401a      	ands	r2, r3
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80006ce:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80006d2:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80006d6:	fa91 f1a1 	rbit	r1, r1
 80006da:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 80006dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80006de:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 80006e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80006e2:	2900      	cmp	r1, #0
 80006e4:	d101      	bne.n	80006ea <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 80006e6:	2120      	movs	r1, #32
 80006e8:	e003      	b.n	80006f2 <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 80006ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80006ec:	fab1 f181 	clz	r1, r1
 80006f0:	b2c9      	uxtb	r1, r1
 80006f2:	40cb      	lsrs	r3, r1
 80006f4:	6879      	ldr	r1, [r7, #4]
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	431a      	orrs	r2, r3
 80006fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000700:	bf00      	nop
 8000702:	373c      	adds	r7, #60	@ 0x3c
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	f043 0201 	orr.w	r2, r3, #1
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	609a      	str	r2, [r3, #8]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	609a      	str	r2, [r3, #8]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000754:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000756:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000758:	4907      	ldr	r1, [pc, #28]	@ (8000778 <LL_APB2_GRP1_EnableClock+0x2c>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4313      	orrs	r3, r2
 800075e:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000760:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000762:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4013      	ands	r3, r2
 8000768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800076a:	68fb      	ldr	r3, [r7, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	40023800 	.word	0x40023800

0800077c <ADC_Driver_Init>:
		.dma_transf = LL_ADC_REG_DMA_TRANSFER_UNLIMITED,
		.dma_enabled = true,
	}
};

bool ADC_Driver_Init (eAdc_t adc) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b090      	sub	sp, #64	@ 0x40
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	if ((eAdc_Last <= adc) || (eAdc_First > adc)) {
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <ADC_Driver_Init+0x14>
		return false;
 800078c:	2300      	movs	r3, #0
 800078e:	e13d      	b.n	8000a0c <ADC_Driver_Init+0x290>
	}

	LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000790:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
	LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]

    static_adc_lut[adc].enable_clock(static_adc_lut[adc].clock);
 80007ac:	79fa      	ldrb	r2, [r7, #7]
 80007ae:	4999      	ldr	r1, [pc, #612]	@ (8000a14 <ADC_Driver_Init+0x298>)
 80007b0:	4613      	mov	r3, r2
 80007b2:	011b      	lsls	r3, r3, #4
 80007b4:	1a9b      	subs	r3, r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	440b      	add	r3, r1
 80007ba:	3314      	adds	r3, #20
 80007bc:	6819      	ldr	r1, [r3, #0]
 80007be:	79fa      	ldrb	r2, [r7, #7]
 80007c0:	4894      	ldr	r0, [pc, #592]	@ (8000a14 <ADC_Driver_Init+0x298>)
 80007c2:	4613      	mov	r3, r2
 80007c4:	011b      	lsls	r3, r3, #4
 80007c6:	1a9b      	subs	r3, r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4403      	add	r3, r0
 80007cc:	3310      	adds	r3, #16
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	4788      	blx	r1

    LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(static_adc_lut[adc].adc), static_adc_common_lut.common_clock);
 80007d4:	4b90      	ldr	r3, [pc, #576]	@ (8000a18 <ADC_Driver_Init+0x29c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	4890      	ldr	r0, [pc, #576]	@ (8000a1c <ADC_Driver_Init+0x2a0>)
 80007dc:	f7ff fee5 	bl	80005aa <LL_ADC_SetCommonClock>

	ADC_InitStruct.Resolution = static_adc_lut[adc].resolution;
 80007e0:	79fa      	ldrb	r2, [r7, #7]
 80007e2:	498c      	ldr	r1, [pc, #560]	@ (8000a14 <ADC_Driver_Init+0x298>)
 80007e4:	4613      	mov	r3, r2
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	1a9b      	subs	r3, r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	440b      	add	r3, r1
 80007ee:	3304      	adds	r3, #4
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	633b      	str	r3, [r7, #48]	@ 0x30
	ADC_InitStruct.DataAlignment = static_adc_lut[adc].data_align;
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	4987      	ldr	r1, [pc, #540]	@ (8000a14 <ADC_Driver_Init+0x298>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	1a9b      	subs	r3, r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	440b      	add	r3, r1
 8000802:	3308      	adds	r3, #8
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	637b      	str	r3, [r7, #52]	@ 0x34
	ADC_InitStruct.SequencersScanMode = static_adc_lut[adc].seq_scan_mode;
 8000808:	79fa      	ldrb	r2, [r7, #7]
 800080a:	4982      	ldr	r1, [pc, #520]	@ (8000a14 <ADC_Driver_Init+0x298>)
 800080c:	4613      	mov	r3, r2
 800080e:	011b      	lsls	r3, r3, #4
 8000810:	1a9b      	subs	r3, r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	440b      	add	r3, r1
 8000816:	330c      	adds	r3, #12
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	63bb      	str	r3, [r7, #56]	@ 0x38

	if (LL_ADC_Init(static_adc_lut[adc].adc, &ADC_InitStruct) != SUCCESS) {
 800081c:	79fa      	ldrb	r2, [r7, #7]
 800081e:	497d      	ldr	r1, [pc, #500]	@ (8000a14 <ADC_Driver_Init+0x298>)
 8000820:	4613      	mov	r3, r2
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	1a9b      	subs	r3, r3, r2
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	440b      	add	r3, r1
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f001 fe04 	bl	8002440 <LL_ADC_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <ADC_Driver_Init+0xc6>
		return false;
 800083e:	2300      	movs	r3, #0
 8000840:	e0e4      	b.n	8000a0c <ADC_Driver_Init+0x290>
	}

	ADC_REG_InitStruct.TriggerSource = static_adc_lut[adc].triggers_source;
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	4973      	ldr	r1, [pc, #460]	@ (8000a14 <ADC_Driver_Init+0x298>)
 8000846:	4613      	mov	r3, r2
 8000848:	011b      	lsls	r3, r3, #4
 800084a:	1a9b      	subs	r3, r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	440b      	add	r3, r1
 8000850:	3320      	adds	r3, #32
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	61fb      	str	r3, [r7, #28]
	ADC_REG_InitStruct.SequencerLength = static_adc_lut[adc].seq_length;
 8000856:	79fa      	ldrb	r2, [r7, #7]
 8000858:	496e      	ldr	r1, [pc, #440]	@ (8000a14 <ADC_Driver_Init+0x298>)
 800085a:	4613      	mov	r3, r2
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	1a9b      	subs	r3, r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	440b      	add	r3, r1
 8000864:	3324      	adds	r3, #36	@ 0x24
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	623b      	str	r3, [r7, #32]
	ADC_REG_InitStruct.SequencerDiscont = static_adc_lut[adc].seq_discont;
 800086a:	79fa      	ldrb	r2, [r7, #7]
 800086c:	4969      	ldr	r1, [pc, #420]	@ (8000a14 <ADC_Driver_Init+0x298>)
 800086e:	4613      	mov	r3, r2
 8000870:	011b      	lsls	r3, r3, #4
 8000872:	1a9b      	subs	r3, r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	440b      	add	r3, r1
 8000878:	3328      	adds	r3, #40	@ 0x28
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
	ADC_REG_InitStruct.ContinuousMode = static_adc_lut[adc].continuous_mode;
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	4964      	ldr	r1, [pc, #400]	@ (8000a14 <ADC_Driver_Init+0x298>)
 8000882:	4613      	mov	r3, r2
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	1a9b      	subs	r3, r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	440b      	add	r3, r1
 800088c:	332c      	adds	r3, #44	@ 0x2c
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
	ADC_REG_InitStruct.DMATransfer = static_adc_lut[adc].dma_transf;
 8000892:	79fa      	ldrb	r2, [r7, #7]
 8000894:	495f      	ldr	r1, [pc, #380]	@ (8000a14 <ADC_Driver_Init+0x298>)
 8000896:	4613      	mov	r3, r2
 8000898:	011b      	lsls	r3, r3, #4
 800089a:	1a9b      	subs	r3, r3, r2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	440b      	add	r3, r1
 80008a0:	3330      	adds	r3, #48	@ 0x30
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (LL_ADC_REG_Init(static_adc_lut[eAdc_1].adc, &ADC_REG_InitStruct) != SUCCESS) {
 80008a6:	4b5b      	ldr	r3, [pc, #364]	@ (8000a14 <ADC_Driver_Init+0x298>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f107 021c 	add.w	r2, r7, #28
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 fdf1 	bl	8002498 <LL_ADC_REG_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <ADC_Driver_Init+0x144>
		return false;
 80008bc:	2300      	movs	r3, #0
 80008be:	e0a5      	b.n	8000a0c <ADC_Driver_Init+0x290>
	}

	for (eAdcChannel_t adc_ch = eAdcChannel_First; adc_ch < eAdcChannel_Last; adc_ch++) {
 80008c0:	2300      	movs	r3, #0
 80008c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80008c6:	e03f      	b.n	8000948 <ADC_Driver_Init+0x1cc>
		if (static_adc_channel_lut[adc_ch].adc == adc) {
 80008c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008cc:	4a54      	ldr	r2, [pc, #336]	@ (8000a20 <ADC_Driver_Init+0x2a4>)
 80008ce:	011b      	lsls	r3, r3, #4
 80008d0:	4413      	add	r3, r2
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d131      	bne.n	800093e <ADC_Driver_Init+0x1c2>
			LL_ADC_REG_SetSequencerRanks(static_adc_lut[adc].adc, static_adc_channel_lut[adc_ch].rank, static_adc_channel_lut[adc_ch].channel);
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	494d      	ldr	r1, [pc, #308]	@ (8000a14 <ADC_Driver_Init+0x298>)
 80008de:	4613      	mov	r3, r2
 80008e0:	011b      	lsls	r3, r3, #4
 80008e2:	1a9b      	subs	r3, r3, r2
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	440b      	add	r3, r1
 80008e8:	6818      	ldr	r0, [r3, #0]
 80008ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008ee:	4a4c      	ldr	r2, [pc, #304]	@ (8000a20 <ADC_Driver_Init+0x2a4>)
 80008f0:	011b      	lsls	r3, r3, #4
 80008f2:	4413      	add	r3, r2
 80008f4:	3304      	adds	r3, #4
 80008f6:	6819      	ldr	r1, [r3, #0]
 80008f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008fc:	4a48      	ldr	r2, [pc, #288]	@ (8000a20 <ADC_Driver_Init+0x2a4>)
 80008fe:	011b      	lsls	r3, r3, #4
 8000900:	4413      	add	r3, r2
 8000902:	3308      	adds	r3, #8
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	461a      	mov	r2, r3
 8000908:	f7ff fe62 	bl	80005d0 <LL_ADC_REG_SetSequencerRanks>
			LL_ADC_SetChannelSamplingTime(static_adc_lut[adc].adc, static_adc_channel_lut[adc_ch].channel, static_adc_channel_lut[adc_ch].sampling_time);
 800090c:	79fa      	ldrb	r2, [r7, #7]
 800090e:	4941      	ldr	r1, [pc, #260]	@ (8000a14 <ADC_Driver_Init+0x298>)
 8000910:	4613      	mov	r3, r2
 8000912:	011b      	lsls	r3, r3, #4
 8000914:	1a9b      	subs	r3, r3, r2
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	440b      	add	r3, r1
 800091a:	6818      	ldr	r0, [r3, #0]
 800091c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000920:	4a3f      	ldr	r2, [pc, #252]	@ (8000a20 <ADC_Driver_Init+0x2a4>)
 8000922:	011b      	lsls	r3, r3, #4
 8000924:	4413      	add	r3, r2
 8000926:	3308      	adds	r3, #8
 8000928:	6819      	ldr	r1, [r3, #0]
 800092a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800092e:	4a3c      	ldr	r2, [pc, #240]	@ (8000a20 <ADC_Driver_Init+0x2a4>)
 8000930:	011b      	lsls	r3, r3, #4
 8000932:	4413      	add	r3, r2
 8000934:	330c      	adds	r3, #12
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	f7ff fe86 	bl	800064a <LL_ADC_SetChannelSamplingTime>
	for (eAdcChannel_t adc_ch = eAdcChannel_First; adc_ch < eAdcChannel_Last; adc_ch++) {
 800093e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000942:	3301      	adds	r3, #1
 8000944:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000948:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0bb      	beq.n	80008c8 <ADC_Driver_Init+0x14c>
		}
	}

	if (static_adc_lut[adc].dma_enabled) {
 8000950:	79fa      	ldrb	r2, [r7, #7]
 8000952:	4930      	ldr	r1, [pc, #192]	@ (8000a14 <ADC_Driver_Init+0x298>)
 8000954:	4613      	mov	r3, r2
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	1a9b      	subs	r3, r3, r2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	440b      	add	r3, r1
 800095e:	3334      	adds	r3, #52	@ 0x34
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d020      	beq.n	80009a8 <ADC_Driver_Init+0x22c>
		sDmaInit_t dma_init = {0};
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
		dma_init.data_amount = eAdcChannel_Last;
 8000976:	2301      	movs	r3, #1
 8000978:	617b      	str	r3, [r7, #20]
		dma_init.dest_addr = &dyn_adc_val;
 800097a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a24 <ADC_Driver_Init+0x2a8>)
 800097c:	613b      	str	r3, [r7, #16]
		dma_init.periph_or_src_addr = (void*) LL_ADC_DMA_GetRegAddr(static_adc_lut[adc].adc, LL_ADC_DMA_REG_REGULAR_DATA);
 800097e:	79fa      	ldrb	r2, [r7, #7]
 8000980:	4924      	ldr	r1, [pc, #144]	@ (8000a14 <ADC_Driver_Init+0x298>)
 8000982:	4613      	mov	r3, r2
 8000984:	011b      	lsls	r3, r3, #4
 8000986:	1a9b      	subs	r3, r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	440b      	add	r3, r1
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fdfd 	bl	8000590 <LL_ADC_DMA_GetRegAddr>
 8000996:	4603      	mov	r3, r0
 8000998:	60fb      	str	r3, [r7, #12]
		dma_init.dma_stream = eDmaStream_1;
 800099a:	2300      	movs	r3, #0
 800099c:	723b      	strb	r3, [r7, #8]
		DMA_Driver_Init(&dma_init);
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f97c 	bl	8000ca0 <DMA_Driver_Init>
	}

	LL_ADC_Enable(static_adc_lut[adc].adc);
 80009a8:	79fa      	ldrb	r2, [r7, #7]
 80009aa:	491a      	ldr	r1, [pc, #104]	@ (8000a14 <ADC_Driver_Init+0x298>)
 80009ac:	4613      	mov	r3, r2
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	1a9b      	subs	r3, r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	440b      	add	r3, r1
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fea7 	bl	800070c <LL_ADC_Enable>
	DMA_Driver_EnableStream(eDmaStream_1);
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 fada 	bl	8000f78 <DMA_Driver_EnableStream>

    NVIC_SetPriority(static_adc_lut[adc].irqn, static_adc_lut[adc].irqn_priority);
 80009c4:	79fa      	ldrb	r2, [r7, #7]
 80009c6:	4913      	ldr	r1, [pc, #76]	@ (8000a14 <ADC_Driver_Init+0x298>)
 80009c8:	4613      	mov	r3, r2
 80009ca:	011b      	lsls	r3, r3, #4
 80009cc:	1a9b      	subs	r3, r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	440b      	add	r3, r1
 80009d2:	3335      	adds	r3, #53	@ 0x35
 80009d4:	f993 0000 	ldrsb.w	r0, [r3]
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	490e      	ldr	r1, [pc, #56]	@ (8000a14 <ADC_Driver_Init+0x298>)
 80009dc:	4613      	mov	r3, r2
 80009de:	011b      	lsls	r3, r3, #4
 80009e0:	1a9b      	subs	r3, r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	440b      	add	r3, r1
 80009e6:	3338      	adds	r3, #56	@ 0x38
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4619      	mov	r1, r3
 80009ec:	f7ff fda6 	bl	800053c <__NVIC_SetPriority>
    NVIC_EnableIRQ(static_adc_lut[adc].irqn);
 80009f0:	79fa      	ldrb	r2, [r7, #7]
 80009f2:	4908      	ldr	r1, [pc, #32]	@ (8000a14 <ADC_Driver_Init+0x298>)
 80009f4:	4613      	mov	r3, r2
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	1a9b      	subs	r3, r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	440b      	add	r3, r1
 80009fe:	3335      	adds	r3, #53	@ 0x35
 8000a00:	f993 3000 	ldrsb.w	r3, [r3]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fd7b 	bl	8000500 <__NVIC_EnableIRQ>

	return true;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3740      	adds	r7, #64	@ 0x40
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000014 	.word	0x20000014
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	40012300 	.word	0x40012300
 8000a20:	20000004 	.word	0x20000004
 8000a24:	200000b4 	.word	0x200000b4

08000a28 <ADC_Driver_ReadChannels>:

bool ADC_Driver_ReadChannels (eAdc_t adc) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	if ((eAdc_Last <= adc) || (eAdc_First > adc)) {
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <ADC_Driver_ReadChannels+0x14>
		return false;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	e00b      	b.n	8000a54 <ADC_Driver_ReadChannels+0x2c>
	}

    LL_ADC_REG_StartConversionSWStart(static_adc_lut[adc].adc);
 8000a3c:	79fa      	ldrb	r2, [r7, #7]
 8000a3e:	4907      	ldr	r1, [pc, #28]	@ (8000a5c <ADC_Driver_ReadChannels+0x34>)
 8000a40:	4613      	mov	r3, r2
 8000a42:	011b      	lsls	r3, r3, #4
 8000a44:	1a9b      	subs	r3, r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	440b      	add	r3, r1
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fe6d 	bl	800072c <LL_ADC_REG_StartConversionSWStart>

    return true;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000014 	.word	0x20000014

08000a60 <ADC_Driver_GetChannelValue>:

bool ADC_Driver_GetChannelValue (eAdcChannel_t channel, uint16_t *value) {
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	6039      	str	r1, [r7, #0]
 8000a6a:	71fb      	strb	r3, [r7, #7]
    if (channel >= eAdcChannel_Last) {
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <ADC_Driver_GetChannelValue+0x16>
        return false;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e00b      	b.n	8000a8e <ADC_Driver_GetChannelValue+0x2e>
    }

    if (value == NULL) {
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d101      	bne.n	8000a80 <ADC_Driver_GetChannelValue+0x20>
        return false;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e006      	b.n	8000a8e <ADC_Driver_GetChannelValue+0x2e>
    }

    *value = dyn_adc_val[channel].value;
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	4a06      	ldr	r2, [pc, #24]	@ (8000a9c <ADC_Driver_GetChannelValue+0x3c>)
 8000a84:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	801a      	strh	r2, [r3, #0]

    return true;
 8000a8c:	2301      	movs	r3, #1
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	200000b4 	.word	0x200000b4

08000aa0 <__NVIC_EnableIRQ>:
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	db0b      	blt.n	8000aca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	f003 021f 	and.w	r2, r3, #31
 8000ab8:	4907      	ldr	r1, [pc, #28]	@ (8000ad8 <__NVIC_EnableIRQ+0x38>)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	095b      	lsrs	r3, r3, #5
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <__NVIC_SetPriority>:
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	@ (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	@ (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <LL_AHB1_GRP1_EnableClock>:
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b38:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b3c:	4907      	ldr	r1, [pc, #28]	@ (8000b5c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	40023800 	.word	0x40023800

08000b60 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b9c <LL_DMA_EnableStream+0x3c>)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4413      	add	r3, r2
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4908      	ldr	r1, [pc, #32]	@ (8000b9c <LL_DMA_EnableStream+0x3c>)
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	440a      	add	r2, r1
 8000b80:	7812      	ldrb	r2, [r2, #0]
 8000b82:	4611      	mov	r1, r2
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	440a      	add	r2, r1
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6013      	str	r3, [r2, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	08002f08 	.word	0x08002f08

08000ba0 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000baa:	4a0c      	ldr	r2, [pc, #48]	@ (8000bdc <LL_DMA_DisableFifoMode+0x3c>)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	4908      	ldr	r1, [pc, #32]	@ (8000bdc <LL_DMA_DisableFifoMode+0x3c>)
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	440a      	add	r2, r1
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	440a      	add	r2, r1
 8000bc8:	f023 0304 	bic.w	r3, r3, #4
 8000bcc:	6153      	str	r3, [r2, #20]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	08002f08 	.word	0x08002f08

08000be0 <LL_DMA_EnableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000bea:	4a0c      	ldr	r2, [pc, #48]	@ (8000c1c <LL_DMA_EnableFifoMode+0x3c>)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	4908      	ldr	r1, [pc, #32]	@ (8000c1c <LL_DMA_EnableFifoMode+0x3c>)
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	440a      	add	r2, r1
 8000c00:	7812      	ldrb	r2, [r2, #0]
 8000c02:	4611      	mov	r1, r2
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	440a      	add	r2, r1
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	6153      	str	r3, [r2, #20]
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	08002f08 	.word	0x08002f08

08000c20 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c5c <LL_DMA_EnableIT_TC+0x3c>)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4413      	add	r3, r2
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4908      	ldr	r1, [pc, #32]	@ (8000c5c <LL_DMA_EnableIT_TC+0x3c>)
 8000c3c:	683a      	ldr	r2, [r7, #0]
 8000c3e:	440a      	add	r2, r1
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	4611      	mov	r1, r2
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	440a      	add	r2, r1
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	6013      	str	r3, [r2, #0]
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	08002f08 	.word	0x08002f08

08000c60 <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c9c <LL_DMA_DisableIT_TC+0x3c>)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4413      	add	r3, r2
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4908      	ldr	r1, [pc, #32]	@ (8000c9c <LL_DMA_DisableIT_TC+0x3c>)
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	440a      	add	r2, r1
 8000c80:	7812      	ldrb	r2, [r2, #0]
 8000c82:	4611      	mov	r1, r2
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	440a      	add	r2, r1
 8000c88:	f023 0310 	bic.w	r3, r3, #16
 8000c8c:	6013      	str	r3, [r2, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	08002f08 	.word	0x08002f08

08000ca0 <DMA_Driver_Init>:
	[eDmaStream_1] = {
		.IT_cb = NULL,
	}
};

bool DMA_Driver_Init (sDmaInit_t *dma_init_data) {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b092      	sub	sp, #72	@ 0x48
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	if ((eDmaStream_Last <= dma_init_data->dma_stream) || (eDmaStream_First > dma_init_data->dma_stream)) {
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <DMA_Driver_Init+0x14>
		return false;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e159      	b.n	8000f68 <DMA_Driver_Init+0x2c8>
	}

	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	223c      	movs	r2, #60	@ 0x3c
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 f8eb 	bl	8002e98 <memset>

	eDmaStream_t dma_stream = dma_init_data->dma_stream;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    static_dma_stream_lut[dma_stream].enable_clock(static_dma_stream_lut[dma_stream].clock);
 8000cca:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000cce:	49a8      	ldr	r1, [pc, #672]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	011b      	lsls	r3, r3, #4
 8000cd4:	1a9b      	subs	r3, r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	440b      	add	r3, r1
 8000cda:	3334      	adds	r3, #52	@ 0x34
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ce2:	4610      	mov	r0, r2
 8000ce4:	4798      	blx	r3

    dyn_dma_lut[dma_stream].buf_size = dma_init_data->data_amount;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68da      	ldr	r2, [r3, #12]
 8000cea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000cee:	b291      	uxth	r1, r2
 8000cf0:	4aa0      	ldr	r2, [pc, #640]	@ (8000f74 <DMA_Driver_Init+0x2d4>)
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	4413      	add	r3, r2
 8000cf6:	460a      	mov	r2, r1
 8000cf8:	801a      	strh	r2, [r3, #0]
    dyn_dma_lut[dma_stream].periph_or_src_addr = dma_init_data->periph_or_src_addr;
 8000cfa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6852      	ldr	r2, [r2, #4]
 8000d02:	499c      	ldr	r1, [pc, #624]	@ (8000f74 <DMA_Driver_Init+0x2d4>)
 8000d04:	011b      	lsls	r3, r3, #4
 8000d06:	440b      	add	r3, r1
 8000d08:	3304      	adds	r3, #4
 8000d0a:	601a      	str	r2, [r3, #0]
    dyn_dma_lut[dma_stream].dst_addr = dma_init_data->dest_addr;
 8000d0c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	6892      	ldr	r2, [r2, #8]
 8000d14:	4997      	ldr	r1, [pc, #604]	@ (8000f74 <DMA_Driver_Init+0x2d4>)
 8000d16:	011b      	lsls	r3, r3, #4
 8000d18:	440b      	add	r3, r1
 8000d1a:	3308      	adds	r3, #8
 8000d1c:	601a      	str	r2, [r3, #0]

    DMA_InitStruct.Channel = static_dma_stream_lut[dma_stream].dma_channel;
 8000d1e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000d22:	4993      	ldr	r1, [pc, #588]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000d24:	4613      	mov	r3, r2
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	1a9b      	subs	r3, r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3308      	adds	r3, #8
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    DMA_InitStruct.Direction = static_dma_stream_lut[dma_stream].direction;
 8000d34:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000d38:	498d      	ldr	r1, [pc, #564]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	011b      	lsls	r3, r3, #4
 8000d3e:	1a9b      	subs	r3, r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	440b      	add	r3, r1
 8000d44:	330c      	adds	r3, #12
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	613b      	str	r3, [r7, #16]
    DMA_InitStruct.Priority = static_dma_stream_lut[dma_stream].priority;
 8000d4a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000d4e:	4988      	ldr	r1, [pc, #544]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000d50:	4613      	mov	r3, r2
 8000d52:	011b      	lsls	r3, r3, #4
 8000d54:	1a9b      	subs	r3, r3, r2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	440b      	add	r3, r1
 8000d5a:	3310      	adds	r3, #16
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	633b      	str	r3, [r7, #48]	@ 0x30
    DMA_InitStruct.Mode = static_dma_stream_lut[dma_stream].mode;
 8000d60:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000d64:	4982      	ldr	r1, [pc, #520]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000d66:	4613      	mov	r3, r2
 8000d68:	011b      	lsls	r3, r3, #4
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	440b      	add	r3, r1
 8000d70:	3314      	adds	r3, #20
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	617b      	str	r3, [r7, #20]
    DMA_InitStruct.PeriphOrM2MSrcIncMode = static_dma_stream_lut[dma_stream].periph_inc_mode;
 8000d76:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000d7a:	497d      	ldr	r1, [pc, #500]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	1a9b      	subs	r3, r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	440b      	add	r3, r1
 8000d86:	3318      	adds	r3, #24
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	61bb      	str	r3, [r7, #24]
    DMA_InitStruct.MemoryOrM2MDstIncMode = static_dma_stream_lut[dma_stream].mem_inc_mode;
 8000d8c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000d90:	4977      	ldr	r1, [pc, #476]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000d92:	4613      	mov	r3, r2
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	331c      	adds	r3, #28
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	61fb      	str	r3, [r7, #28]
    DMA_InitStruct.PeriphOrM2MSrcDataSize = static_dma_stream_lut[dma_stream].periph_size;
 8000da2:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000da6:	4972      	ldr	r1, [pc, #456]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000da8:	4613      	mov	r3, r2
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	1a9b      	subs	r3, r3, r2
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	440b      	add	r3, r1
 8000db2:	3320      	adds	r3, #32
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	623b      	str	r3, [r7, #32]
    DMA_InitStruct.MemoryOrM2MDstDataSize = static_dma_stream_lut[dma_stream].mem_size;
 8000db8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000dbc:	496c      	ldr	r1, [pc, #432]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	011b      	lsls	r3, r3, #4
 8000dc2:	1a9b      	subs	r3, r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	3324      	adds	r3, #36	@ 0x24
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    DMA_InitStruct.NbData = dyn_dma_lut[dma_stream].buf_size;
 8000dce:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000dd2:	4a68      	ldr	r2, [pc, #416]	@ (8000f74 <DMA_Driver_Init+0x2d4>)
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	4413      	add	r3, r2
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	62bb      	str	r3, [r7, #40]	@ 0x28
    DMA_InitStruct.PeriphOrM2MSrcAddress = (uint32_t)dyn_dma_lut[dma_stream].periph_or_src_addr;
 8000ddc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000de0:	4a64      	ldr	r2, [pc, #400]	@ (8000f74 <DMA_Driver_Init+0x2d4>)
 8000de2:	011b      	lsls	r3, r3, #4
 8000de4:	4413      	add	r3, r2
 8000de6:	3304      	adds	r3, #4
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	60bb      	str	r3, [r7, #8]
    DMA_InitStruct.MemoryOrM2MDstAddress = (uint32_t)dyn_dma_lut[dma_stream].dst_addr;
 8000dec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000df0:	4a60      	ldr	r2, [pc, #384]	@ (8000f74 <DMA_Driver_Init+0x2d4>)
 8000df2:	011b      	lsls	r3, r3, #4
 8000df4:	4413      	add	r3, r2
 8000df6:	3308      	adds	r3, #8
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	60fb      	str	r3, [r7, #12]

    if (LL_DMA_Init(static_dma_stream_lut[dma_stream].dma, static_dma_stream_lut[dma_stream].dma_stream, &DMA_InitStruct) != SUCCESS) {
 8000dfc:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000e00:	495b      	ldr	r1, [pc, #364]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000e02:	4613      	mov	r3, r2
 8000e04:	011b      	lsls	r3, r3, #4
 8000e06:	1a9b      	subs	r3, r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	6818      	ldr	r0, [r3, #0]
 8000e0e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000e12:	4957      	ldr	r1, [pc, #348]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000e14:	4613      	mov	r3, r2
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3304      	adds	r3, #4
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f107 0208 	add.w	r2, r7, #8
 8000e26:	4619      	mov	r1, r3
 8000e28:	f001 fc84 	bl	8002734 <LL_DMA_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <DMA_Driver_Init+0x196>
    	return false;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e098      	b.n	8000f68 <DMA_Driver_Init+0x2c8>
    }

    if (static_dma_stream_lut[dma_stream].fifo) {
 8000e36:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000e3a:	494d      	ldr	r1, [pc, #308]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	440b      	add	r3, r1
 8000e46:	3328      	adds	r3, #40	@ 0x28
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d016      	beq.n	8000e7c <DMA_Driver_Init+0x1dc>
    	LL_DMA_EnableFifoMode(static_dma_stream_lut[dma_stream].dma, static_dma_stream_lut[dma_stream].dma_stream);
 8000e4e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000e52:	4947      	ldr	r1, [pc, #284]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000e54:	4613      	mov	r3, r2
 8000e56:	011b      	lsls	r3, r3, #4
 8000e58:	1a9b      	subs	r3, r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	6818      	ldr	r0, [r3, #0]
 8000e60:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000e64:	4942      	ldr	r1, [pc, #264]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000e66:	4613      	mov	r3, r2
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	1a9b      	subs	r3, r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	3304      	adds	r3, #4
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff feb3 	bl	8000be0 <LL_DMA_EnableFifoMode>
 8000e7a:	e015      	b.n	8000ea8 <DMA_Driver_Init+0x208>
    } else {
    	LL_DMA_DisableFifoMode(static_dma_stream_lut[dma_stream].dma, static_dma_stream_lut[dma_stream].dma_stream);
 8000e7c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000e80:	493b      	ldr	r1, [pc, #236]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000e82:	4613      	mov	r3, r2
 8000e84:	011b      	lsls	r3, r3, #4
 8000e86:	1a9b      	subs	r3, r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	6818      	ldr	r0, [r3, #0]
 8000e8e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000e92:	4937      	ldr	r1, [pc, #220]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000e94:	4613      	mov	r3, r2
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	1a9b      	subs	r3, r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f7ff fe7c 	bl	8000ba0 <LL_DMA_DisableFifoMode>
    }

    if (static_dma_stream_lut[dma_stream].dma_interrupt) {
 8000ea8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000eac:	4930      	ldr	r1, [pc, #192]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000eae:	4613      	mov	r3, r2
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	1a9b      	subs	r3, r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	3329      	adds	r3, #41	@ 0x29
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d03c      	beq.n	8000f3a <DMA_Driver_Init+0x29a>
    	LL_DMA_EnableIT_TC(static_dma_stream_lut[dma_stream].dma, static_dma_stream_lut[dma_stream].dma_stream);
 8000ec0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000ec4:	492a      	ldr	r1, [pc, #168]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	011b      	lsls	r3, r3, #4
 8000eca:	1a9b      	subs	r3, r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	440b      	add	r3, r1
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000ed6:	4926      	ldr	r1, [pc, #152]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000ed8:	4613      	mov	r3, r2
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	1a9b      	subs	r3, r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f7ff fe9a 	bl	8000c20 <LL_DMA_EnableIT_TC>
    	NVIC_SetPriority(static_dma_stream_lut[dma_stream].dma_irq, static_dma_stream_lut[dma_stream].irq_prio);
 8000eec:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000ef0:	491f      	ldr	r1, [pc, #124]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	1a9b      	subs	r3, r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	440b      	add	r3, r1
 8000efc:	332c      	adds	r3, #44	@ 0x2c
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	b258      	sxtb	r0, r3
 8000f02:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000f06:	491a      	ldr	r1, [pc, #104]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000f08:	4613      	mov	r3, r2
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	1a9b      	subs	r3, r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	440b      	add	r3, r1
 8000f12:	3330      	adds	r3, #48	@ 0x30
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4619      	mov	r1, r3
 8000f18:	f7ff fde0 	bl	8000adc <__NVIC_SetPriority>
		NVIC_EnableIRQ(static_dma_stream_lut[dma_stream].dma_irq);
 8000f1c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000f20:	4913      	ldr	r1, [pc, #76]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000f22:	4613      	mov	r3, r2
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	1a9b      	subs	r3, r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	332c      	adds	r3, #44	@ 0x2c
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fdb4 	bl	8000aa0 <__NVIC_EnableIRQ>
 8000f38:	e015      	b.n	8000f66 <DMA_Driver_Init+0x2c6>
    } else {
    	LL_DMA_DisableIT_TC(static_dma_stream_lut[dma_stream].dma, static_dma_stream_lut[dma_stream].dma_stream);
 8000f3a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000f3e:	490c      	ldr	r1, [pc, #48]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000f40:	4613      	mov	r3, r2
 8000f42:	011b      	lsls	r3, r3, #4
 8000f44:	1a9b      	subs	r3, r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	440b      	add	r3, r1
 8000f4a:	6818      	ldr	r0, [r3, #0]
 8000f4c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000f50:	4907      	ldr	r1, [pc, #28]	@ (8000f70 <DMA_Driver_Init+0x2d0>)
 8000f52:	4613      	mov	r3, r2
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	1a9b      	subs	r3, r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	f7ff fe7d 	bl	8000c60 <LL_DMA_DisableIT_TC>
    }

    return true;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3748      	adds	r7, #72	@ 0x48
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	08002f10 	.word	0x08002f10
 8000f74:	200000b8 	.word	0x200000b8

08000f78 <DMA_Driver_EnableStream>:

bool DMA_Driver_EnableStream (eDmaStream_t dma_stream) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	if ((eDmaStream_Last <= dma_stream) || (eDmaStream_First > dma_stream)) {
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <DMA_Driver_EnableStream+0x14>
		return false;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e014      	b.n	8000fb6 <DMA_Driver_EnableStream+0x3e>
	}

    LL_DMA_EnableStream(static_dma_stream_lut[dma_stream].dma, static_dma_stream_lut[dma_stream].dma_stream);
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	490c      	ldr	r1, [pc, #48]	@ (8000fc0 <DMA_Driver_EnableStream+0x48>)
 8000f90:	4613      	mov	r3, r2
 8000f92:	011b      	lsls	r3, r3, #4
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	4908      	ldr	r1, [pc, #32]	@ (8000fc0 <DMA_Driver_EnableStream+0x48>)
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	011b      	lsls	r3, r3, #4
 8000fa4:	1a9b      	subs	r3, r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	3304      	adds	r3, #4
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f7ff fdd6 	bl	8000b60 <LL_DMA_EnableStream>
    return true;
 8000fb4:	2301      	movs	r3, #1
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	08002f10 	.word	0x08002f10

08000fc4 <__NVIC_GetPriorityGrouping>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_EnableIRQ>:
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db0b      	blt.n	800100a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	f003 021f 	and.w	r2, r3, #31
 8000ff8:	4907      	ldr	r1, [pc, #28]	@ (8001018 <__NVIC_EnableIRQ+0x38>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	2001      	movs	r0, #1
 8001002:	fa00 f202 	lsl.w	r2, r0, r2
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_SetPriority>:
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	@ (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	@ (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	@ 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	@ 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	041a      	lsls	r2, r3, #16
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80010fc:	4b07      	ldr	r3, [pc, #28]	@ (800111c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80010fe:	695a      	ldr	r2, [r3, #20]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4013      	ands	r3, r2
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	429a      	cmp	r2, r3
 8001108:	bf0c      	ite	eq
 800110a:	2301      	moveq	r3, #1
 800110c:	2300      	movne	r3, #0
 800110e:	b2db      	uxtb	r3, r3
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	40013c00 	.word	0x40013c00

08001120 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001128:	4a04      	ldr	r2, [pc, #16]	@ (800113c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6153      	str	r3, [r2, #20]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40013c00 	.word	0x40013c00

08001140 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800114a:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <LL_SYSCFG_SetEXTISource+0x68>)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	3302      	adds	r3, #2
 8001152:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	0c1b      	lsrs	r3, r3, #16
 800115a:	43db      	mvns	r3, r3
 800115c:	ea02 0103 	and.w	r1, r2, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	0c1b      	lsrs	r3, r3, #16
 8001164:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	60fb      	str	r3, [r7, #12]
  return result;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <LL_SYSCFG_SetEXTISource+0x3c>
    return 32U;
 8001178:	2320      	movs	r3, #32
 800117a:	e003      	b.n	8001184 <LL_SYSCFG_SetEXTISource+0x44>
  return __builtin_clz(value);
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461a      	mov	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	fa03 f202 	lsl.w	r2, r3, r2
 800118c:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <LL_SYSCFG_SetEXTISource+0x68>)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	430a      	orrs	r2, r1
 8001194:	3302      	adds	r3, #2
 8001196:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800119a:	bf00      	nop
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40013800 	.word	0x40013800

080011ac <LL_AHB1_GRP1_EnableClock>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011b8:	4907      	ldr	r1, [pc, #28]	@ (80011d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4313      	orrs	r3, r2
 80011be:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011c0:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4013      	ands	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	40023800 	.word	0x40023800

080011dc <GPIO_Driver_Init>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool GPIO_Driver_Init (void) {
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b08b      	sub	sp, #44	@ 0x2c
 80011e0:	af00      	add	r7, sp, #0
    LL_GPIO_InitTypeDef gpio_init_struct = {0};
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
 80011f2:	615a      	str	r2, [r3, #20]
    bool is_init_successful = true;
 80011f4:	2301      	movs	r3, #1
 80011f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    for (eGpioPin_t pin = eGpioPin_First; pin < eGpioPin_Last; pin++) {
 80011fa:	2300      	movs	r3, #0
 80011fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001200:	e0fb      	b.n	80013fa <GPIO_Driver_Init+0x21e>
        LL_AHB1_GRP1_EnableClock(g_static_gpio_lut[pin].clock);
 8001202:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001206:	4982      	ldr	r1, [pc, #520]	@ (8001410 <GPIO_Driver_Init+0x234>)
 8001208:	4613      	mov	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	440b      	add	r3, r1
 8001212:	3318      	adds	r3, #24
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ffc8 	bl	80011ac <LL_AHB1_GRP1_EnableClock>
        LL_GPIO_ResetOutputPin(g_static_gpio_lut[pin].port, g_static_gpio_lut[pin].pin);
 800121c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001220:	497b      	ldr	r1, [pc, #492]	@ (8001410 <GPIO_Driver_Init+0x234>)
 8001222:	4613      	mov	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	1a9b      	subs	r3, r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	440b      	add	r3, r1
 800122c:	6818      	ldr	r0, [r3, #0]
 800122e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001232:	4977      	ldr	r1, [pc, #476]	@ (8001410 <GPIO_Driver_Init+0x234>)
 8001234:	4613      	mov	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	440b      	add	r3, r1
 800123e:	3304      	adds	r3, #4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff ff47 	bl	80010d6 <LL_GPIO_ResetOutputPin>

        gpio_init_struct.Pin = g_static_gpio_lut[pin].pin;
 8001248:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800124c:	4970      	ldr	r1, [pc, #448]	@ (8001410 <GPIO_Driver_Init+0x234>)
 800124e:	4613      	mov	r3, r2
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	440b      	add	r3, r1
 8001258:	3304      	adds	r3, #4
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	60fb      	str	r3, [r7, #12]
        gpio_init_struct.Mode = g_static_gpio_lut[pin].mode;
 800125e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001262:	496b      	ldr	r1, [pc, #428]	@ (8001410 <GPIO_Driver_Init+0x234>)
 8001264:	4613      	mov	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	1a9b      	subs	r3, r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	440b      	add	r3, r1
 800126e:	3308      	adds	r3, #8
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	613b      	str	r3, [r7, #16]
        gpio_init_struct.Speed = g_static_gpio_lut[pin].speed;
 8001274:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001278:	4965      	ldr	r1, [pc, #404]	@ (8001410 <GPIO_Driver_Init+0x234>)
 800127a:	4613      	mov	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	1a9b      	subs	r3, r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	440b      	add	r3, r1
 8001284:	330c      	adds	r3, #12
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	617b      	str	r3, [r7, #20]
        gpio_init_struct.OutputType = g_static_gpio_lut[pin].output;
 800128a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800128e:	4960      	ldr	r1, [pc, #384]	@ (8001410 <GPIO_Driver_Init+0x234>)
 8001290:	4613      	mov	r3, r2
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	440b      	add	r3, r1
 800129a:	3310      	adds	r3, #16
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	61bb      	str	r3, [r7, #24]
        gpio_init_struct.Pull = g_static_gpio_lut[pin].pull;
 80012a0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80012a4:	495a      	ldr	r1, [pc, #360]	@ (8001410 <GPIO_Driver_Init+0x234>)
 80012a6:	4613      	mov	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	1a9b      	subs	r3, r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	440b      	add	r3, r1
 80012b0:	3314      	adds	r3, #20
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61fb      	str	r3, [r7, #28]
        gpio_init_struct.Alternate = g_static_gpio_lut[pin].alternate;
 80012b6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80012ba:	4955      	ldr	r1, [pc, #340]	@ (8001410 <GPIO_Driver_Init+0x234>)
 80012bc:	4613      	mov	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	440b      	add	r3, r1
 80012c6:	331c      	adds	r3, #28
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	623b      	str	r3, [r7, #32]

        if (LL_GPIO_Init(g_static_gpio_lut[pin].port, &gpio_init_struct) != SUCCESS) {
 80012cc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80012d0:	494f      	ldr	r1, [pc, #316]	@ (8001410 <GPIO_Driver_Init+0x234>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	1a9b      	subs	r3, r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	440b      	add	r3, r1
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f107 020c 	add.w	r2, r7, #12
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fce1 	bl	8002cac <LL_GPIO_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <GPIO_Driver_Init+0x11a>
            is_init_successful = false;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (g_static_gpio_lut[pin].is_interrupt) {
 80012f6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80012fa:	4945      	ldr	r1, [pc, #276]	@ (8001410 <GPIO_Driver_Init+0x234>)
 80012fc:	4613      	mov	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	440b      	add	r3, r1
 8001306:	3320      	adds	r3, #32
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d070      	beq.n	80013f0 <GPIO_Driver_Init+0x214>
        	LL_EXTI_InitTypeDef exti_init_struct = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
        	exti_init_struct.Line_0_31 = g_static_gpio_lut[pin].line;
 8001316:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800131a:	493d      	ldr	r1, [pc, #244]	@ (8001410 <GPIO_Driver_Init+0x234>)
 800131c:	4613      	mov	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	1a9b      	subs	r3, r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	440b      	add	r3, r1
 8001326:	3324      	adds	r3, #36	@ 0x24
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	607b      	str	r3, [r7, #4]
        	exti_init_struct.LineCommand = g_static_gpio_lut[pin].line_command;
 800132c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001330:	4937      	ldr	r1, [pc, #220]	@ (8001410 <GPIO_Driver_Init+0x234>)
 8001332:	4613      	mov	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	1a9b      	subs	r3, r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	440b      	add	r3, r1
 800133c:	3328      	adds	r3, #40	@ 0x28
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	723b      	strb	r3, [r7, #8]
        	exti_init_struct.Mode = g_static_gpio_lut[pin].exti_mode;
 8001342:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001346:	4932      	ldr	r1, [pc, #200]	@ (8001410 <GPIO_Driver_Init+0x234>)
 8001348:	4613      	mov	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	1a9b      	subs	r3, r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	440b      	add	r3, r1
 8001352:	3329      	adds	r3, #41	@ 0x29
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	727b      	strb	r3, [r7, #9]
        	exti_init_struct.Trigger = g_static_gpio_lut[pin].trigger;
 8001358:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800135c:	492c      	ldr	r1, [pc, #176]	@ (8001410 <GPIO_Driver_Init+0x234>)
 800135e:	4613      	mov	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	440b      	add	r3, r1
 8001368:	332a      	adds	r3, #42	@ 0x2a
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	72bb      	strb	r3, [r7, #10]

        	LL_SYSCFG_SetEXTISource(g_static_gpio_lut[pin].syscfg_port, g_static_gpio_lut[pin].syscfg_line);
 800136e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001372:	4927      	ldr	r1, [pc, #156]	@ (8001410 <GPIO_Driver_Init+0x234>)
 8001374:	4613      	mov	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	1a9b      	subs	r3, r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	440b      	add	r3, r1
 800137e:	332c      	adds	r3, #44	@ 0x2c
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001386:	4922      	ldr	r1, [pc, #136]	@ (8001410 <GPIO_Driver_Init+0x234>)
 8001388:	4613      	mov	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	440b      	add	r3, r1
 8001392:	3330      	adds	r3, #48	@ 0x30
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fed2 	bl	8001140 <LL_SYSCFG_SetEXTISource>

        	LL_EXTI_Init(&exti_init_struct);
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 faba 	bl	8002918 <LL_EXTI_Init>

        	NVIC_SetPriority(g_static_gpio_lut[pin].exti_irq, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80013a4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80013a8:	4919      	ldr	r1, [pc, #100]	@ (8001410 <GPIO_Driver_Init+0x234>)
 80013aa:	4613      	mov	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	1a9b      	subs	r3, r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	440b      	add	r3, r1
 80013b4:	3334      	adds	r3, #52	@ 0x34
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	b25c      	sxtb	r4, r3
 80013ba:	f7ff fe03 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 80013be:	4603      	mov	r3, r0
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fe53 	bl	8001070 <NVIC_EncodePriority>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4619      	mov	r1, r3
 80013ce:	4620      	mov	r0, r4
 80013d0:	f7ff fe24 	bl	800101c <__NVIC_SetPriority>
        	NVIC_EnableIRQ(g_static_gpio_lut[pin].exti_irq);
 80013d4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80013d8:	490d      	ldr	r1, [pc, #52]	@ (8001410 <GPIO_Driver_Init+0x234>)
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	440b      	add	r3, r1
 80013e4:	3334      	adds	r3, #52	@ 0x34
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fdf8 	bl	8000fe0 <__NVIC_EnableIRQ>
    for (eGpioPin_t pin = eGpioPin_First; pin < eGpioPin_Last; pin++) {
 80013f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80013f4:	3301      	adds	r3, #1
 80013f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80013fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80013fe:	2b07      	cmp	r3, #7
 8001400:	f67f aeff 	bls.w	8001202 <GPIO_Driver_Init+0x26>
        }
    }

    return is_init_successful;
 8001404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001408:	4618      	mov	r0, r3
 800140a:	372c      	adds	r7, #44	@ 0x2c
 800140c:	46bd      	mov	sp, r7
 800140e:	bd90      	pop	{r4, r7, pc}
 8001410:	08002f4c 	.word	0x08002f4c

08001414 <EXTI1_IRQHandler>:

    return true;
}


void EXTI1_IRQHandler (void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
    if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1)) {
 800141a:	2002      	movs	r0, #2
 800141c:	f7ff fe6a 	bl	80010f4 <LL_EXTI_IsActiveFlag_0_31>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00c      	beq.n	8001440 <EXTI1_IRQHandler+0x2c>
        LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8001426:	2002      	movs	r0, #2
 8001428:	f7ff fe7a 	bl	8001120 <LL_EXTI_ClearFlag_0_31>

        uint16_t value = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	80fb      	strh	r3, [r7, #6]

        ADC_Driver_ReadChannels(eAdc_1);
 8001430:	2000      	movs	r0, #0
 8001432:	f7ff faf9 	bl	8000a28 <ADC_Driver_ReadChannels>
        ADC_Driver_GetChannelValue(eAdcChannel_1, &value);
 8001436:	1dbb      	adds	r3, r7, #6
 8001438:	4619      	mov	r1, r3
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff fb10 	bl	8000a60 <ADC_Driver_GetChannelValue>
    }
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144c:	f000 fa16 	bl	800187c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001450:	f000 f824 	bl	800149c <SystemClock_Config>
//  MX_DMA_Init();
//  MX_USART2_UART_Init();
//  MX_ADC1_Init();
//  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
  if (GPIO_Driver_Init() != 1) {
 8001454:	f7ff fec2 	bl	80011dc <GPIO_Driver_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	f083 0301 	eor.w	r3, r3, #1
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <main+0x20>
	  Error_Handler();
 8001464:	f000 f886 	bl	8001574 <Error_Handler>
  }

  if (ADC_Driver_Init(eAdc_1) != 1) {
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff f987 	bl	800077c <ADC_Driver_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	f083 0301 	eor.w	r3, r3, #1
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <main+0x36>
	  Error_Handler();
 800147a:	f000 f87b 	bl	8001574 <Error_Handler>
  }

  if (SPI_Driver_Init(eSpi_SdCardReader) != 1) {
 800147e:	2000      	movs	r0, #0
 8001480:	f000 f8aa 	bl	80015d8 <SPI_Driver_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	f083 0301 	eor.w	r3, r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <main+0x4e>
	  Error_Handler();
 8001490:	f000 f870 	bl	8001574 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	e7fd      	b.n	8001496 <main+0x4e>
	...

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b094      	sub	sp, #80	@ 0x50
 80014a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 0320 	add.w	r3, r7, #32
 80014a6:	2230      	movs	r2, #48	@ 0x30
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 fcf4 	bl	8002e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	4b29      	ldr	r3, [pc, #164]	@ (800156c <SystemClock_Config+0xd0>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c8:	4a28      	ldr	r2, [pc, #160]	@ (800156c <SystemClock_Config+0xd0>)
 80014ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d0:	4b26      	ldr	r3, [pc, #152]	@ (800156c <SystemClock_Config+0xd0>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80014dc:	2300      	movs	r3, #0
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <SystemClock_Config+0xd4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014e8:	4a21      	ldr	r2, [pc, #132]	@ (8001570 <SystemClock_Config+0xd4>)
 80014ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <SystemClock_Config+0xd4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014fc:	2302      	movs	r3, #2
 80014fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001500:	2301      	movs	r3, #1
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001504:	2310      	movs	r3, #16
 8001506:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001508:	2302      	movs	r3, #2
 800150a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800150c:	2300      	movs	r3, #0
 800150e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001510:	2310      	movs	r3, #16
 8001512:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001514:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001518:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800151a:	2304      	movs	r3, #4
 800151c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800151e:	2307      	movs	r3, #7
 8001520:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001522:	f107 0320 	add.w	r3, r7, #32
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fb00 	bl	8001b2c <HAL_RCC_OscConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001532:	f000 f81f 	bl	8001574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001536:	230f      	movs	r3, #15
 8001538:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153a:	2302      	movs	r3, #2
 800153c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001542:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001546:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2102      	movs	r1, #2
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fd62 	bl	800201c <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800155e:	f000 f809 	bl	8001574 <Error_Handler>
  }
}
 8001562:	bf00      	nop
 8001564:	3750      	adds	r7, #80	@ 0x50
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000

08001574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
}
 800157a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <Error_Handler+0x8>

08001580 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f023 0210 	bic.w	r2, r3, #16
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	605a      	str	r2, [r3, #4]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <LL_APB1_GRP1_EnableClock>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015b4:	4907      	ldr	r1, [pc, #28]	@ (80015d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80015bc:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4013      	ands	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40023800 	.word	0x40023800

080015d8 <SPI_Driver_Init>:
		.enable_clock = LL_APB1_GRP1_EnableClock,
		.clock = LL_APB1_GRP1_PERIPH_SPI2
	}
};

bool SPI_Driver_Init (eSpi_t spi) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	@ 0x30
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
	if ((eSpi_Last <= spi) || (eSpi_First > spi)) {
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SPI_Driver_Init+0x14>
		return false;
 80015e8:	2300      	movs	r3, #0
 80015ea:	e0a6      	b.n	800173a <SPI_Driver_Init+0x162>
	}

	LL_SPI_InitTypeDef spi_init_struct = {0};
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	2228      	movs	r2, #40	@ 0x28
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f001 fc4f 	bl	8002e98 <memset>

	static_spi_driver_lut[spi].enable_clock(static_spi_driver_lut[spi].clock);
 80015fa:	79fa      	ldrb	r2, [r7, #7]
 80015fc:	4951      	ldr	r1, [pc, #324]	@ (8001744 <SPI_Driver_Init+0x16c>)
 80015fe:	4613      	mov	r3, r2
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	3334      	adds	r3, #52	@ 0x34
 800160a:	6819      	ldr	r1, [r3, #0]
 800160c:	79fa      	ldrb	r2, [r7, #7]
 800160e:	484d      	ldr	r0, [pc, #308]	@ (8001744 <SPI_Driver_Init+0x16c>)
 8001610:	4613      	mov	r3, r2
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4403      	add	r3, r0
 800161a:	3338      	adds	r3, #56	@ 0x38
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	4788      	blx	r1

	spi_init_struct.TransferDirection = static_spi_driver_lut[spi].transfer_direction;
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	4947      	ldr	r1, [pc, #284]	@ (8001744 <SPI_Driver_Init+0x16c>)
 8001626:	4613      	mov	r3, r2
 8001628:	011b      	lsls	r3, r3, #4
 800162a:	1a9b      	subs	r3, r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	3308      	adds	r3, #8
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60bb      	str	r3, [r7, #8]
	spi_init_struct.Mode = static_spi_driver_lut[spi].mode;
 8001636:	79fa      	ldrb	r2, [r7, #7]
 8001638:	4942      	ldr	r1, [pc, #264]	@ (8001744 <SPI_Driver_Init+0x16c>)
 800163a:	4613      	mov	r3, r2
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	1a9b      	subs	r3, r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	330c      	adds	r3, #12
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
	spi_init_struct.DataWidth = static_spi_driver_lut[spi].data_width;
 800164a:	79fa      	ldrb	r2, [r7, #7]
 800164c:	493d      	ldr	r1, [pc, #244]	@ (8001744 <SPI_Driver_Init+0x16c>)
 800164e:	4613      	mov	r3, r2
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	1a9b      	subs	r3, r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	3310      	adds	r3, #16
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	613b      	str	r3, [r7, #16]
	spi_init_struct.ClockPolarity = static_spi_driver_lut[spi].clock_polarity;
 800165e:	79fa      	ldrb	r2, [r7, #7]
 8001660:	4938      	ldr	r1, [pc, #224]	@ (8001744 <SPI_Driver_Init+0x16c>)
 8001662:	4613      	mov	r3, r2
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	1a9b      	subs	r3, r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	3314      	adds	r3, #20
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	617b      	str	r3, [r7, #20]
	spi_init_struct.ClockPhase = static_spi_driver_lut[spi].clock_phase;
 8001672:	79fa      	ldrb	r2, [r7, #7]
 8001674:	4933      	ldr	r1, [pc, #204]	@ (8001744 <SPI_Driver_Init+0x16c>)
 8001676:	4613      	mov	r3, r2
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	1a9b      	subs	r3, r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	3318      	adds	r3, #24
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	61bb      	str	r3, [r7, #24]
	spi_init_struct.NSS = static_spi_driver_lut[spi].nss;
 8001686:	79fa      	ldrb	r2, [r7, #7]
 8001688:	492e      	ldr	r1, [pc, #184]	@ (8001744 <SPI_Driver_Init+0x16c>)
 800168a:	4613      	mov	r3, r2
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	1a9b      	subs	r3, r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	331c      	adds	r3, #28
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	61fb      	str	r3, [r7, #28]
	spi_init_struct.BaudRate = static_spi_driver_lut[spi].baudrate;
 800169a:	79fa      	ldrb	r2, [r7, #7]
 800169c:	4929      	ldr	r1, [pc, #164]	@ (8001744 <SPI_Driver_Init+0x16c>)
 800169e:	4613      	mov	r3, r2
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	3320      	adds	r3, #32
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	623b      	str	r3, [r7, #32]
	spi_init_struct.BitOrder = static_spi_driver_lut[spi].bit_order;
 80016ae:	79fa      	ldrb	r2, [r7, #7]
 80016b0:	4924      	ldr	r1, [pc, #144]	@ (8001744 <SPI_Driver_Init+0x16c>)
 80016b2:	4613      	mov	r3, r2
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	1a9b      	subs	r3, r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	3324      	adds	r3, #36	@ 0x24
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	627b      	str	r3, [r7, #36]	@ 0x24
	spi_init_struct.CRCCalculation = static_spi_driver_lut[spi].crc_calculation;
 80016c2:	79fa      	ldrb	r2, [r7, #7]
 80016c4:	491f      	ldr	r1, [pc, #124]	@ (8001744 <SPI_Driver_Init+0x16c>)
 80016c6:	4613      	mov	r3, r2
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	1a9b      	subs	r3, r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	3328      	adds	r3, #40	@ 0x28
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	spi_init_struct.CRCPoly = static_spi_driver_lut[spi].crc_poly;
 80016d6:	79fa      	ldrb	r2, [r7, #7]
 80016d8:	491a      	ldr	r1, [pc, #104]	@ (8001744 <SPI_Driver_Init+0x16c>)
 80016da:	4613      	mov	r3, r2
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	1a9b      	subs	r3, r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	332c      	adds	r3, #44	@ 0x2c
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (LL_SPI_Init(static_spi_driver_lut[spi].spi, &spi_init_struct) != SUCCESS) {
 80016ea:	79fa      	ldrb	r2, [r7, #7]
 80016ec:	4915      	ldr	r1, [pc, #84]	@ (8001744 <SPI_Driver_Init+0x16c>)
 80016ee:	4613      	mov	r3, r2
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	1a9b      	subs	r3, r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f107 0208 	add.w	r2, r7, #8
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f001 fb77 	bl	8002df4 <LL_SPI_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <SPI_Driver_Init+0x138>
		return false;
 800170c:	2300      	movs	r3, #0
 800170e:	e014      	b.n	800173a <SPI_Driver_Init+0x162>
	}

	LL_SPI_SetStandard(static_spi_driver_lut[spi].spi, static_spi_driver_lut[spi].standard);
 8001710:	79fa      	ldrb	r2, [r7, #7]
 8001712:	490c      	ldr	r1, [pc, #48]	@ (8001744 <SPI_Driver_Init+0x16c>)
 8001714:	4613      	mov	r3, r2
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	1a9b      	subs	r3, r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	79fa      	ldrb	r2, [r7, #7]
 8001722:	4908      	ldr	r1, [pc, #32]	@ (8001744 <SPI_Driver_Init+0x16c>)
 8001724:	4613      	mov	r3, r2
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	3330      	adds	r3, #48	@ 0x30
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff ff24 	bl	8001580 <LL_SPI_SetStandard>

	return true;
 8001738:	2301      	movs	r3, #1
}
 800173a:	4618      	mov	r0, r3
 800173c:	3730      	adds	r7, #48	@ 0x30
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000050 	.word	0x20000050

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <HAL_MspInit+0x4c>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	4a0f      	ldr	r2, [pc, #60]	@ (8001794 <HAL_MspInit+0x4c>)
 8001758:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800175c:	6453      	str	r3, [r2, #68]	@ 0x44
 800175e:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <HAL_MspInit+0x4c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <HAL_MspInit+0x4c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	4a08      	ldr	r2, [pc, #32]	@ (8001794 <HAL_MspInit+0x4c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	@ 0x40
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_MspInit+0x4c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <NMI_Handler+0x4>

080017a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <MemManage_Handler+0x4>

080017b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <BusFault_Handler+0x4>

080017b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <UsageFault_Handler+0x4>

080017c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ee:	f000 f897 	bl	8001920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <SystemInit+0x20>)
 800180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800180e:	4a05      	ldr	r2, [pc, #20]	@ (8001824 <SystemInit+0x20>)
 8001810:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001814:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001828:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001860 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800182c:	f7ff ffea 	bl	8001804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001830:	480c      	ldr	r0, [pc, #48]	@ (8001864 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001832:	490d      	ldr	r1, [pc, #52]	@ (8001868 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001834:	4a0d      	ldr	r2, [pc, #52]	@ (800186c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001846:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001848:	4c0a      	ldr	r4, [pc, #40]	@ (8001874 <LoopFillZerobss+0x22>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001856:	f001 fb27 	bl	8002ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185a:	f7ff fdf5 	bl	8001448 <main>
  bx  lr    
 800185e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001860:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800186c:	08003134 	.word	0x08003134
  ldr r2, =_sbss
 8001870:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001874:	200000cc 	.word	0x200000cc

08001878 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC_IRQHandler>
	...

0800187c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001880:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <HAL_Init+0x40>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0d      	ldr	r2, [pc, #52]	@ (80018bc <HAL_Init+0x40>)
 8001886:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800188a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800188c:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <HAL_Init+0x40>)
 8001892:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001896:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a07      	ldr	r2, [pc, #28]	@ (80018bc <HAL_Init+0x40>)
 800189e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a4:	2003      	movs	r0, #3
 80018a6:	f000 f90d 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f000 f808 	bl	80018c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b0:	f7ff ff4a 	bl	8001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023c00 	.word	0x40023c00

080018c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c8:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <HAL_InitTick+0x54>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <HAL_InitTick+0x58>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018da:	fbb2 f3f3 	udiv	r3, r2, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f917 	bl	8001b12 <HAL_SYSTICK_Config>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00e      	b.n	800190c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b0f      	cmp	r3, #15
 80018f2:	d80a      	bhi.n	800190a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f4:	2200      	movs	r2, #0
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	f000 f8ed 	bl	8001ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001900:	4a06      	ldr	r2, [pc, #24]	@ (800191c <HAL_InitTick+0x5c>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e000      	b.n	800190c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	2000008c 	.word	0x2000008c
 8001918:	20000094 	.word	0x20000094
 800191c:	20000090 	.word	0x20000090

08001920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <HAL_IncTick+0x20>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_IncTick+0x24>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4413      	add	r3, r2
 8001930:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <HAL_IncTick+0x24>)
 8001932:	6013      	str	r3, [r2, #0]
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000094 	.word	0x20000094
 8001944:	200000c8 	.word	0x200000c8

08001948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return uwTick;
 800194c:	4b03      	ldr	r3, [pc, #12]	@ (800195c <HAL_GetTick+0x14>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	200000c8 	.word	0x200000c8

08001960 <__NVIC_SetPriorityGrouping>:
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001970:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800198c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	@ (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_GetPriorityGrouping>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ac:	4b04      	ldr	r3, [pc, #16]	@ (80019c0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0307 	and.w	r3, r3, #7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_SetPriority>:
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	db0a      	blt.n	80019ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	490c      	ldr	r1, [pc, #48]	@ (8001a10 <__NVIC_SetPriority+0x4c>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	0112      	lsls	r2, r2, #4
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	440b      	add	r3, r1
 80019e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80019ec:	e00a      	b.n	8001a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4908      	ldr	r1, [pc, #32]	@ (8001a14 <__NVIC_SetPriority+0x50>)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	3b04      	subs	r3, #4
 80019fc:	0112      	lsls	r2, r2, #4
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	440b      	add	r3, r1
 8001a02:	761a      	strb	r2, [r3, #24]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000e100 	.word	0xe000e100
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <NVIC_EncodePriority>:
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	@ 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f1c3 0307 	rsb	r3, r3, #7
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	bf28      	it	cs
 8001a36:	2304      	movcs	r3, #4
 8001a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d902      	bls.n	8001a48 <NVIC_EncodePriority+0x30>
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3b03      	subs	r3, #3
 8001a46:	e000      	b.n	8001a4a <NVIC_EncodePriority+0x32>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43da      	mvns	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	43d9      	mvns	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	4313      	orrs	r3, r2
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3724      	adds	r7, #36	@ 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a90:	d301      	bcc.n	8001a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00f      	b.n	8001ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <SysTick_Config+0x40>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9e:	210f      	movs	r1, #15
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f7ff ff8e 	bl	80019c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa8:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <SysTick_Config+0x40>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aae:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <SysTick_Config+0x40>)
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	e000e010 	.word	0xe000e010

08001ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff47 	bl	8001960 <__NVIC_SetPriorityGrouping>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aec:	f7ff ff5c 	bl	80019a8 <__NVIC_GetPriorityGrouping>
 8001af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ff8e 	bl	8001a18 <NVIC_EncodePriority>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff5d 	bl	80019c4 <__NVIC_SetPriority>
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ffb0 	bl	8001a80 <SysTick_Config>
 8001b20:	4603      	mov	r3, r0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e267      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d075      	beq.n	8001c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b4a:	4b88      	ldr	r3, [pc, #544]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d00c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b56:	4b85      	ldr	r3, [pc, #532]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d112      	bne.n	8001b88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b62:	4b82      	ldr	r3, [pc, #520]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b6e:	d10b      	bne.n	8001b88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	4b7e      	ldr	r3, [pc, #504]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d05b      	beq.n	8001c34 <HAL_RCC_OscConfig+0x108>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d157      	bne.n	8001c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e242      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b90:	d106      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x74>
 8001b92:	4b76      	ldr	r3, [pc, #472]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a75      	ldr	r2, [pc, #468]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e01d      	b.n	8001bdc <HAL_RCC_OscConfig+0xb0>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x98>
 8001baa:	4b70      	ldr	r3, [pc, #448]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a6f      	ldr	r2, [pc, #444]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6c      	ldr	r2, [pc, #432]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0xb0>
 8001bc4:	4b69      	ldr	r3, [pc, #420]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a68      	ldr	r2, [pc, #416]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b66      	ldr	r3, [pc, #408]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a65      	ldr	r2, [pc, #404]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d013      	beq.n	8001c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff feb0 	bl	8001948 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff feac 	bl	8001948 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	@ 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e207      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b5b      	ldr	r3, [pc, #364]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0xc0>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fe9c 	bl	8001948 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff fe98 	bl	8001948 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	@ 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1f3      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c26:	4b51      	ldr	r3, [pc, #324]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0xe8>
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d063      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c42:	4b4a      	ldr	r3, [pc, #296]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4e:	4b47      	ldr	r3, [pc, #284]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d11c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c5a:	4b44      	ldr	r3, [pc, #272]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d116      	bne.n	8001c94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	4b41      	ldr	r3, [pc, #260]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_RCC_OscConfig+0x152>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e1c7      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4937      	ldr	r1, [pc, #220]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	e03a      	b.n	8001d0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d020      	beq.n	8001cde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9c:	4b34      	ldr	r3, [pc, #208]	@ (8001d70 <HAL_RCC_OscConfig+0x244>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fe51 	bl	8001948 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001caa:	f7ff fe4d 	bl	8001948 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e1a8      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc8:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4925      	ldr	r1, [pc, #148]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]
 8001cdc:	e015      	b.n	8001d0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cde:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <HAL_RCC_OscConfig+0x244>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fe30 	bl	8001948 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cec:	f7ff fe2c 	bl	8001948 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e187      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d036      	beq.n	8001d84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d016      	beq.n	8001d4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <HAL_RCC_OscConfig+0x248>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d24:	f7ff fe10 	bl	8001948 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7ff fe0c 	bl	8001948 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e167      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x200>
 8001d4a:	e01b      	b.n	8001d84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4c:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <HAL_RCC_OscConfig+0x248>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d52:	f7ff fdf9 	bl	8001948 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d58:	e00e      	b.n	8001d78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5a:	f7ff fdf5 	bl	8001948 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d907      	bls.n	8001d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e150      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	42470000 	.word	0x42470000
 8001d74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	4b88      	ldr	r3, [pc, #544]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1ea      	bne.n	8001d5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8097 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d96:	4b81      	ldr	r3, [pc, #516]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10f      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	4b7d      	ldr	r3, [pc, #500]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	4a7c      	ldr	r2, [pc, #496]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db2:	4b7a      	ldr	r3, [pc, #488]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	4b77      	ldr	r3, [pc, #476]	@ (8001fa0 <HAL_RCC_OscConfig+0x474>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d118      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dce:	4b74      	ldr	r3, [pc, #464]	@ (8001fa0 <HAL_RCC_OscConfig+0x474>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a73      	ldr	r2, [pc, #460]	@ (8001fa0 <HAL_RCC_OscConfig+0x474>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dda:	f7ff fdb5 	bl	8001948 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7ff fdb1 	bl	8001948 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e10c      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	4b6a      	ldr	r3, [pc, #424]	@ (8001fa0 <HAL_RCC_OscConfig+0x474>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x2ea>
 8001e08:	4b64      	ldr	r3, [pc, #400]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0c:	4a63      	ldr	r2, [pc, #396]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e14:	e01c      	b.n	8001e50 <HAL_RCC_OscConfig+0x324>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x30c>
 8001e1e:	4b5f      	ldr	r3, [pc, #380]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e22:	4a5e      	ldr	r2, [pc, #376]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2a:	4b5c      	ldr	r3, [pc, #368]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0x324>
 8001e38:	4b58      	ldr	r3, [pc, #352]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3c:	4a57      	ldr	r2, [pc, #348]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e44:	4b55      	ldr	r3, [pc, #340]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e48:	4a54      	ldr	r2, [pc, #336]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e4a:	f023 0304 	bic.w	r3, r3, #4
 8001e4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d015      	beq.n	8001e84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff fd76 	bl	8001948 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e60:	f7ff fd72 	bl	8001948 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0cb      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e76:	4b49      	ldr	r3, [pc, #292]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0ee      	beq.n	8001e60 <HAL_RCC_OscConfig+0x334>
 8001e82:	e014      	b.n	8001eae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e84:	f7ff fd60 	bl	8001948 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fd5c 	bl	8001948 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e0b5      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ee      	bne.n	8001e8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b39      	ldr	r3, [pc, #228]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	4a38      	ldr	r2, [pc, #224]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80a1 	beq.w	800200c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eca:	4b34      	ldr	r3, [pc, #208]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d05c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d141      	bne.n	8001f62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	4b31      	ldr	r3, [pc, #196]	@ (8001fa4 <HAL_RCC_OscConfig+0x478>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fd30 	bl	8001948 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7ff fd2c 	bl	8001948 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e087      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	4b27      	ldr	r3, [pc, #156]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	019b      	lsls	r3, r3, #6
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f20:	085b      	lsrs	r3, r3, #1
 8001f22:	3b01      	subs	r3, #1
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	491b      	ldr	r1, [pc, #108]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f34:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa4 <HAL_RCC_OscConfig+0x478>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7ff fd05 	bl	8001948 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f42:	f7ff fd01 	bl	8001948 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e05c      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x416>
 8001f60:	e054      	b.n	800200c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f62:	4b10      	ldr	r3, [pc, #64]	@ (8001fa4 <HAL_RCC_OscConfig+0x478>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff fcee 	bl	8001948 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7ff fcea 	bl	8001948 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e045      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x444>
 8001f8e:	e03d      	b.n	800200c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e038      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <HAL_RCC_OscConfig+0x4ec>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d028      	beq.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d121      	bne.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d11a      	bne.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fd8:	4013      	ands	r3, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d111      	bne.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fee:	085b      	lsrs	r3, r3, #1
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002002:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0cc      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002030:	4b68      	ldr	r3, [pc, #416]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d90c      	bls.n	8002058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203e:	4b65      	ldr	r3, [pc, #404]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002046:	4b63      	ldr	r3, [pc, #396]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d001      	beq.n	8002058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0b8      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d020      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002070:	4b59      	ldr	r3, [pc, #356]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4a58      	ldr	r2, [pc, #352]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800207a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002088:	4b53      	ldr	r3, [pc, #332]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a52      	ldr	r2, [pc, #328]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002094:	4b50      	ldr	r3, [pc, #320]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	494d      	ldr	r1, [pc, #308]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d044      	beq.n	800213c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d107      	bne.n	80020ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b47      	ldr	r3, [pc, #284]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d119      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e07f      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d003      	beq.n	80020da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020da:	4b3f      	ldr	r3, [pc, #252]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e06f      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ea:	4b3b      	ldr	r3, [pc, #236]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e067      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fa:	4b37      	ldr	r3, [pc, #220]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f023 0203 	bic.w	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4934      	ldr	r1, [pc, #208]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800210c:	f7ff fc1c 	bl	8001948 <HAL_GetTick>
 8002110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	e00a      	b.n	800212a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002114:	f7ff fc18 	bl	8001948 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e04f      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	4b2b      	ldr	r3, [pc, #172]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 020c 	and.w	r2, r3, #12
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	429a      	cmp	r2, r3
 800213a:	d1eb      	bne.n	8002114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800213c:	4b25      	ldr	r3, [pc, #148]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d20c      	bcs.n	8002164 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	4b22      	ldr	r3, [pc, #136]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b20      	ldr	r3, [pc, #128]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e032      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002170:	4b19      	ldr	r3, [pc, #100]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4916      	ldr	r1, [pc, #88]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800218e:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	490e      	ldr	r1, [pc, #56]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021a2:	f000 f821 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	490a      	ldr	r1, [pc, #40]	@ (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	5ccb      	ldrb	r3, [r1, r3]
 80021b6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ba:	4a09      	ldr	r2, [pc, #36]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021be:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fb7c 	bl	80018c0 <HAL_InitTick>

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023c00 	.word	0x40023c00
 80021d8:	40023800 	.word	0x40023800
 80021dc:	0800310c 	.word	0x0800310c
 80021e0:	2000008c 	.word	0x2000008c
 80021e4:	20000090 	.word	0x20000090

080021e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021ec:	b094      	sub	sp, #80	@ 0x50
 80021ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002200:	4b79      	ldr	r3, [pc, #484]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b08      	cmp	r3, #8
 800220a:	d00d      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x40>
 800220c:	2b08      	cmp	r3, #8
 800220e:	f200 80e1 	bhi.w	80023d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x34>
 8002216:	2b04      	cmp	r3, #4
 8002218:	d003      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0x3a>
 800221a:	e0db      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800221c:	4b73      	ldr	r3, [pc, #460]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x204>)
 800221e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002220:	e0db      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002222:	4b73      	ldr	r3, [pc, #460]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002224:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002226:	e0d8      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002228:	4b6f      	ldr	r3, [pc, #444]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002230:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002232:	4b6d      	ldr	r3, [pc, #436]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d063      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223e:	4b6a      	ldr	r3, [pc, #424]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	099b      	lsrs	r3, r3, #6
 8002244:	2200      	movs	r2, #0
 8002246:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002248:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800224a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800224c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002250:	633b      	str	r3, [r7, #48]	@ 0x30
 8002252:	2300      	movs	r3, #0
 8002254:	637b      	str	r3, [r7, #52]	@ 0x34
 8002256:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800225a:	4622      	mov	r2, r4
 800225c:	462b      	mov	r3, r5
 800225e:	f04f 0000 	mov.w	r0, #0
 8002262:	f04f 0100 	mov.w	r1, #0
 8002266:	0159      	lsls	r1, r3, #5
 8002268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800226c:	0150      	lsls	r0, r2, #5
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4621      	mov	r1, r4
 8002274:	1a51      	subs	r1, r2, r1
 8002276:	6139      	str	r1, [r7, #16]
 8002278:	4629      	mov	r1, r5
 800227a:	eb63 0301 	sbc.w	r3, r3, r1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800228c:	4659      	mov	r1, fp
 800228e:	018b      	lsls	r3, r1, #6
 8002290:	4651      	mov	r1, sl
 8002292:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002296:	4651      	mov	r1, sl
 8002298:	018a      	lsls	r2, r1, #6
 800229a:	4651      	mov	r1, sl
 800229c:	ebb2 0801 	subs.w	r8, r2, r1
 80022a0:	4659      	mov	r1, fp
 80022a2:	eb63 0901 	sbc.w	r9, r3, r1
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022ba:	4690      	mov	r8, r2
 80022bc:	4699      	mov	r9, r3
 80022be:	4623      	mov	r3, r4
 80022c0:	eb18 0303 	adds.w	r3, r8, r3
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	462b      	mov	r3, r5
 80022c8:	eb49 0303 	adc.w	r3, r9, r3
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022da:	4629      	mov	r1, r5
 80022dc:	024b      	lsls	r3, r1, #9
 80022de:	4621      	mov	r1, r4
 80022e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022e4:	4621      	mov	r1, r4
 80022e6:	024a      	lsls	r2, r1, #9
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ee:	2200      	movs	r2, #0
 80022f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022f8:	f7fd ff6c 	bl	80001d4 <__aeabi_uldivmod>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4613      	mov	r3, r2
 8002302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002304:	e058      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002306:	4b38      	ldr	r3, [pc, #224]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	099b      	lsrs	r3, r3, #6
 800230c:	2200      	movs	r2, #0
 800230e:	4618      	mov	r0, r3
 8002310:	4611      	mov	r1, r2
 8002312:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002316:	623b      	str	r3, [r7, #32]
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
 800231c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002320:	4642      	mov	r2, r8
 8002322:	464b      	mov	r3, r9
 8002324:	f04f 0000 	mov.w	r0, #0
 8002328:	f04f 0100 	mov.w	r1, #0
 800232c:	0159      	lsls	r1, r3, #5
 800232e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002332:	0150      	lsls	r0, r2, #5
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4641      	mov	r1, r8
 800233a:	ebb2 0a01 	subs.w	sl, r2, r1
 800233e:	4649      	mov	r1, r9
 8002340:	eb63 0b01 	sbc.w	fp, r3, r1
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002350:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002354:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002358:	ebb2 040a 	subs.w	r4, r2, sl
 800235c:	eb63 050b 	sbc.w	r5, r3, fp
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	00eb      	lsls	r3, r5, #3
 800236a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800236e:	00e2      	lsls	r2, r4, #3
 8002370:	4614      	mov	r4, r2
 8002372:	461d      	mov	r5, r3
 8002374:	4643      	mov	r3, r8
 8002376:	18e3      	adds	r3, r4, r3
 8002378:	603b      	str	r3, [r7, #0]
 800237a:	464b      	mov	r3, r9
 800237c:	eb45 0303 	adc.w	r3, r5, r3
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800238e:	4629      	mov	r1, r5
 8002390:	028b      	lsls	r3, r1, #10
 8002392:	4621      	mov	r1, r4
 8002394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002398:	4621      	mov	r1, r4
 800239a:	028a      	lsls	r2, r1, #10
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a2:	2200      	movs	r2, #0
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	61fa      	str	r2, [r7, #28]
 80023a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ac:	f7fd ff12 	bl	80001d4 <__aeabi_uldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4613      	mov	r3, r2
 80023b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	3301      	adds	r3, #1
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80023c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023d2:	e002      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023d4:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x204>)
 80023d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3750      	adds	r7, #80	@ 0x50
 80023e0:	46bd      	mov	sp, r7
 80023e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	00f42400 	.word	0x00f42400
 80023f0:	007a1200 	.word	0x007a1200

080023f4 <LL_ADC_REG_SetSequencerLength>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002402:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <LL_ADC_IsEnabled>:
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b01      	cmp	r3, #1
 800242c:	bf0c      	ite	eq
 800242e:	2301      	moveq	r3, #1
 8002430:	2300      	movne	r3, #0
 8002432:	b2db      	uxtb	r3, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800244a:	2300      	movs	r3, #0
 800244c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffe3 	bl	800241a <LL_ADC_IsEnabled>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d117      	bne.n	800248a <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8002462:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	6811      	ldr	r1, [r2, #0]
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	6892      	ldr	r2, [r2, #8]
 800246e:	430a      	orrs	r2, r1
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	e001      	b.n	800248e <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800248e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ffb7 	bl	800241a <LL_ADC_IsEnabled>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d12b      	bne.n	800250a <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	e005      	b.n	80024da <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	4b0e      	ldr	r3, [pc, #56]	@ (8002518 <LL_ADC_REG_Init+0x80>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	68d2      	ldr	r2, [r2, #12]
 80024ee:	4311      	orrs	r1, r2
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	6912      	ldr	r2, [r2, #16]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4619      	mov	r1, r3
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ff76 	bl	80023f4 <LL_ADC_REG_SetSequencerLength>
 8002508:	e001      	b.n	800250e <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800250e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	c0fffcfd 	.word	0xc0fffcfd

0800251c <LL_DMA_ConfigTransfer>:
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR,
 8002528:	4a0e      	ldr	r2, [pc, #56]	@ (8002564 <LL_DMA_ConfigTransfer+0x48>)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4413      	add	r3, r2
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4413      	add	r3, r2
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f423 335f 	bic.w	r3, r3, #228352	@ 0x37c00
 800253c:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 8002540:	4908      	ldr	r1, [pc, #32]	@ (8002564 <LL_DMA_ConfigTransfer+0x48>)
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	440a      	add	r2, r1
 8002546:	7812      	ldrb	r2, [r2, #0]
 8002548:	4611      	mov	r1, r2
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	440a      	add	r2, r1
 800254e:	4611      	mov	r1, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	0800311c 	.word	0x0800311c

08002568 <LL_DMA_SetDataLength>:
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8002574:	4a0d      	ldr	r2, [pc, #52]	@ (80025ac <LL_DMA_SetDataLength+0x44>)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4413      	add	r3, r2
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4413      	add	r3, r2
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	041b      	lsls	r3, r3, #16
 8002588:	4908      	ldr	r1, [pc, #32]	@ (80025ac <LL_DMA_SetDataLength+0x44>)
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	440a      	add	r2, r1
 800258e:	7812      	ldrb	r2, [r2, #0]
 8002590:	4611      	mov	r1, r2
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	440a      	add	r2, r1
 8002596:	4611      	mov	r1, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	0800311c 	.word	0x0800311c

080025b0 <LL_DMA_SetChannelSelection>:
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80025bc:	4a0d      	ldr	r2, [pc, #52]	@ (80025f4 <LL_DMA_SetChannelSelection+0x44>)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	4413      	add	r3, r2
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4413      	add	r3, r2
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80025d0:	4908      	ldr	r1, [pc, #32]	@ (80025f4 <LL_DMA_SetChannelSelection+0x44>)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	440b      	add	r3, r1
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	440b      	add	r3, r1
 80025de:	4619      	mov	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	0800311c 	.word	0x0800311c

080025f8 <LL_DMA_SetMemoryBurstxfer>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MBURST, Mburst);
 8002604:	4a0d      	ldr	r2, [pc, #52]	@ (800263c <LL_DMA_SetMemoryBurstxfer+0x44>)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4413      	add	r3, r2
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 72c0 	bic.w	r2, r3, #25165824	@ 0x1800000
 8002618:	4908      	ldr	r1, [pc, #32]	@ (800263c <LL_DMA_SetMemoryBurstxfer+0x44>)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	440b      	add	r3, r1
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4619      	mov	r1, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	440b      	add	r3, r1
 8002626:	4619      	mov	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	0800311c 	.word	0x0800311c

08002640 <LL_DMA_SetPeriphBurstxfer>:
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PBURST, Pburst);
 800264c:	4a0d      	ldr	r2, [pc, #52]	@ (8002684 <LL_DMA_SetPeriphBurstxfer+0x44>)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4413      	add	r3, r2
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4413      	add	r3, r2
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f423 02c0 	bic.w	r2, r3, #6291456	@ 0x600000
 8002660:	4908      	ldr	r1, [pc, #32]	@ (8002684 <LL_DMA_SetPeriphBurstxfer+0x44>)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	440b      	add	r3, r1
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	4619      	mov	r1, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	440b      	add	r3, r1
 800266e:	4619      	mov	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	0800311c 	.word	0x0800311c

08002688 <LL_DMA_ConfigFifo>:
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_FTH|DMA_SxFCR_DMDIS, FifoMode|FifoThreshold);
 8002696:	4a0e      	ldr	r2, [pc, #56]	@ (80026d0 <LL_DMA_ConfigFifo+0x48>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4413      	add	r3, r2
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f023 0207 	bic.w	r2, r3, #7
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	430b      	orrs	r3, r1
 80026b0:	4807      	ldr	r0, [pc, #28]	@ (80026d0 <LL_DMA_ConfigFifo+0x48>)
 80026b2:	68b9      	ldr	r1, [r7, #8]
 80026b4:	4401      	add	r1, r0
 80026b6:	7809      	ldrb	r1, [r1, #0]
 80026b8:	4608      	mov	r0, r1
 80026ba:	68f9      	ldr	r1, [r7, #12]
 80026bc:	4401      	add	r1, r0
 80026be:	4313      	orrs	r3, r2
 80026c0:	614b      	str	r3, [r1, #20]
}
 80026c2:	bf00      	nop
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	0800311c 	.word	0x0800311c

080026d4 <LL_DMA_SetMemoryAddress>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80026e0:	4a07      	ldr	r2, [pc, #28]	@ (8002700 <LL_DMA_SetMemoryAddress+0x2c>)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	4413      	add	r3, r2
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4413      	add	r3, r2
 80026ee:	461a      	mov	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	60d3      	str	r3, [r2, #12]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	0800311c 	.word	0x0800311c

08002704 <LL_DMA_SetPeriphAddress>:
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8002710:	4a07      	ldr	r2, [pc, #28]	@ (8002730 <LL_DMA_SetPeriphAddress+0x2c>)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4413      	add	r3, r2
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4413      	add	r3, r2
 800271e:	461a      	mov	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6093      	str	r3, [r2, #8]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	0800311c 	.word	0x0800311c

08002734 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Stream, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_SxCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_SxCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_SxCR_MSIZE[1:0] bits
   * - Priority:               DMA_SxCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Stream, DMA_InitStruct->Direction | \
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                    | \
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Stream, DMA_InitStruct->Direction | \
 8002748:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode   | \
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                    | \
 800274e:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode   | \
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode   | \
 8002754:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize  | \
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode   | \
 800275a:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize  | \
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize  | \
 8002760:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_DMA_ConfigTransfer(DMAx, Stream, DMA_InitStruct->Direction | \
 8002766:	4313      	orrs	r3, r2
 8002768:	461a      	mov	r2, r3
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f7ff fed5 	bl	800251c <LL_DMA_ConfigTransfer>
                        );

  if(DMA_InitStruct->FIFOMode != LL_DMA_FIFOMODE_DISABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d015      	beq.n	80027a6 <LL_DMA_Init+0x72>
    /*---------------------------- DMAx SxFCR Configuration ------------------------
     * Configure DMAx_Streamy:  fifo mode and fifo threshold with parameters :
     * - FIFOMode:                DMA_SxFCR_DMDIS bit
     * - FIFOThreshold:           DMA_SxFCR_FTH[1:0] bits
     */
    LL_DMA_ConfigFifo(DMAx, Stream, DMA_InitStruct->FIFOMode, DMA_InitStruct->FIFOThreshold);   
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f7ff ff7f 	bl	8002688 <LL_DMA_ConfigFifo>

    /*---------------------------- DMAx SxCR Configuration --------------------------
     * Configure DMAx_Streamy:  memory burst transfer with parameters :
     * - MemBurst:                DMA_SxCR_MBURST[1:0] bits
     */
    LL_DMA_SetMemoryBurstxfer(DMAx,Stream,DMA_InitStruct->MemBurst); 
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800278e:	461a      	mov	r2, r3
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f7ff ff30 	bl	80025f8 <LL_DMA_SetMemoryBurstxfer>

    /*---------------------------- DMAx SxCR Configuration --------------------------
     * Configure DMAx_Streamy:  peripheral burst transfer with parameters :
     * - PeriphBurst:             DMA_SxCR_PBURST[1:0] bits
     */
    LL_DMA_SetPeriphBurstxfer(DMAx,Stream,DMA_InitStruct->PeriphBurst);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800279c:	461a      	mov	r2, r3
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f7ff ff4d 	bl	8002640 <LL_DMA_SetPeriphBurstxfer>

  /*-------------------------- DMAx SxM0AR Configuration --------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress:     DMA_SxM0AR_M0A[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Stream, DMA_InitStruct->MemoryOrM2MDstAddress);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	461a      	mov	r2, r3
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f7ff ff90 	bl	80026d4 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx SxPAR Configuration ---------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress:     DMA_SxPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Stream, DMA_InitStruct->PeriphOrM2MSrcAddress);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f7ff ffa1 	bl	8002704 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx SxNDTR Configuration -------------------------
   * Configure the peripheral base address with parameter :
   * - NbData:                    DMA_SxNDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Stream, DMA_InitStruct->NbData);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	461a      	mov	r2, r3
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f7ff fecc 	bl	8002568 <LL_DMA_SetDataLength>

  /*--------------------------- DMA SxCR_CHSEL Configuration ----------------------
   * Configure the peripheral base address with parameter :
   * - PeriphRequest:             DMA_SxCR_CHSEL[2:0] bits
   */
  LL_DMA_SetChannelSelection(DMAx, Stream, DMA_InitStruct->Channel);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d4:	461a      	mov	r2, r3
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f7ff fee9 	bl	80025b0 <LL_DMA_SetChannelSelection>

  return SUCCESS;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <LL_EXTI_EnableIT_0_31>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80027f0:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <LL_EXTI_EnableIT_0_31+0x20>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4904      	ldr	r1, [pc, #16]	@ (8002808 <LL_EXTI_EnableIT_0_31+0x20>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	40013c00 	.word	0x40013c00

0800280c <LL_EXTI_DisableIT_0_31>:
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <LL_EXTI_DisableIT_0_31+0x24>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	43db      	mvns	r3, r3
 800281c:	4904      	ldr	r1, [pc, #16]	@ (8002830 <LL_EXTI_DisableIT_0_31+0x24>)
 800281e:	4013      	ands	r3, r2
 8002820:	600b      	str	r3, [r1, #0]
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40013c00 	.word	0x40013c00

08002834 <LL_EXTI_EnableEvent_0_31>:
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800283c:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <LL_EXTI_EnableEvent_0_31+0x20>)
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	4904      	ldr	r1, [pc, #16]	@ (8002854 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	40013c00 	.word	0x40013c00

08002858 <LL_EXTI_DisableEvent_0_31>:
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002860:	4b06      	ldr	r3, [pc, #24]	@ (800287c <LL_EXTI_DisableEvent_0_31+0x24>)
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	43db      	mvns	r3, r3
 8002868:	4904      	ldr	r1, [pc, #16]	@ (800287c <LL_EXTI_DisableEvent_0_31+0x24>)
 800286a:	4013      	ands	r3, r2
 800286c:	604b      	str	r3, [r1, #4]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40013c00 	.word	0x40013c00

08002880 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002888:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	4904      	ldr	r1, [pc, #16]	@ (80028a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4313      	orrs	r3, r2
 8002892:	608b      	str	r3, [r1, #8]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	40013c00 	.word	0x40013c00

080028a4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80028ac:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	4904      	ldr	r1, [pc, #16]	@ (80028c8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40013c00 	.word	0x40013c00

080028cc <LL_EXTI_EnableFallingTrig_0_31>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80028d4:	4b05      	ldr	r3, [pc, #20]	@ (80028ec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	4904      	ldr	r1, [pc, #16]	@ (80028ec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60cb      	str	r3, [r1, #12]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	40013c00 	.word	0x40013c00

080028f0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80028f8:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	43db      	mvns	r3, r3
 8002900:	4904      	ldr	r1, [pc, #16]	@ (8002914 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002902:	4013      	ands	r3, r2
 8002904:	60cb      	str	r3, [r1, #12]
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40013c00 	.word	0x40013c00

08002918 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002920:	2300      	movs	r3, #0
 8002922:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	791b      	ldrb	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d065      	beq.n	80029f8 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d06b      	beq.n	8002a0c <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	795b      	ldrb	r3, [r3, #5]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d01c      	beq.n	8002976 <LL_EXTI_Init+0x5e>
 800293c:	2b02      	cmp	r3, #2
 800293e:	dc25      	bgt.n	800298c <LL_EXTI_Init+0x74>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <LL_EXTI_Init+0x32>
 8002944:	2b01      	cmp	r3, #1
 8002946:	d00b      	beq.n	8002960 <LL_EXTI_Init+0x48>
 8002948:	e020      	b.n	800298c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff ff82 	bl	8002858 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff45 	bl	80027e8 <LL_EXTI_EnableIT_0_31>
          break;
 800295e:	e018      	b.n	8002992 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff51 	bl	800280c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ff60 	bl	8002834 <LL_EXTI_EnableEvent_0_31>
          break;
 8002974:	e00d      	b.n	8002992 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff34 	bl	80027e8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff55 	bl	8002834 <LL_EXTI_EnableEvent_0_31>
          break;
 800298a:	e002      	b.n	8002992 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
          break;
 8002990:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	799b      	ldrb	r3, [r3, #6]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d038      	beq.n	8002a0c <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	799b      	ldrb	r3, [r3, #6]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d01c      	beq.n	80029dc <LL_EXTI_Init+0xc4>
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	dc25      	bgt.n	80029f2 <LL_EXTI_Init+0xda>
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d002      	beq.n	80029b0 <LL_EXTI_Init+0x98>
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d00b      	beq.n	80029c6 <LL_EXTI_Init+0xae>
 80029ae:	e020      	b.n	80029f2 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff9b 	bl	80028f0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff ff5e 	bl	8002880 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80029c4:	e022      	b.n	8002a0c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ff6a 	bl	80028a4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff ff79 	bl	80028cc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80029da:	e017      	b.n	8002a0c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff4d 	bl	8002880 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ff6e 	bl	80028cc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80029f0:	e00c      	b.n	8002a0c <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
            break;
 80029f6:	e009      	b.n	8002a0c <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff05 	bl	800280c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff ff26 	bl	8002858 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <LL_GPIO_SetPinMode>:
{
 8002a16:	b480      	push	{r7}
 8002a18:	b08b      	sub	sp, #44	@ 0x2c
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	613b      	str	r3, [r7, #16]
  return result;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	e003      	b.n	8002a48 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2103      	movs	r1, #3
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	401a      	ands	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	61fb      	str	r3, [r7, #28]
  return result;
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	e003      	b.n	8002a76 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	601a      	str	r2, [r3, #0]
}
 8002a84:	bf00      	nop
 8002a86:	372c      	adds	r7, #44	@ 0x2c
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_GPIO_SetPinOutputType>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	401a      	ands	r2, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	605a      	str	r2, [r3, #4]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_GPIO_SetPinSpeed>:
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b08b      	sub	sp, #44	@ 0x2c
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	613b      	str	r3, [r7, #16]
  return result;
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	e003      	b.n	8002af2 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	2103      	movs	r1, #3
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	401a      	ands	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	61fb      	str	r3, [r7, #28]
  return result;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002b14:	2320      	movs	r3, #32
 8002b16:	e003      	b.n	8002b20 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	609a      	str	r2, [r3, #8]
}
 8002b2e:	bf00      	nop
 8002b30:	372c      	adds	r7, #44	@ 0x2c
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <LL_GPIO_SetPinPull>:
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b08b      	sub	sp, #44	@ 0x2c
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	613b      	str	r3, [r7, #16]
  return result;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002b60:	2320      	movs	r3, #32
 8002b62:	e003      	b.n	8002b6c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2103      	movs	r1, #3
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	401a      	ands	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	61fb      	str	r3, [r7, #28]
  return result;
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002b8e:	2320      	movs	r3, #32
 8002b90:	e003      	b.n	8002b9a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b94:	fab3 f383 	clz	r3, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	60da      	str	r2, [r3, #12]
}
 8002ba8:	bf00      	nop
 8002baa:	372c      	adds	r7, #44	@ 0x2c
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_GPIO_SetAFPin_0_7>:
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b08b      	sub	sp, #44	@ 0x2c
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a1a      	ldr	r2, [r3, #32]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	613b      	str	r3, [r7, #16]
  return result;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002bda:	2320      	movs	r3, #32
 8002bdc:	e003      	b.n	8002be6 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	210f      	movs	r1, #15
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	fa93 f3a3 	rbit	r3, r3
 8002bfc:	61fb      	str	r3, [r7, #28]
  return result;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e003      	b.n	8002c14 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	621a      	str	r2, [r3, #32]
}
 8002c22:	bf00      	nop
 8002c24:	372c      	adds	r7, #44	@ 0x2c
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_GPIO_SetAFPin_8_15>:
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b08b      	sub	sp, #44	@ 0x2c
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	0a1b      	lsrs	r3, r3, #8
 8002c42:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	613b      	str	r3, [r7, #16]
  return result;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002c56:	2320      	movs	r3, #32
 8002c58:	e003      	b.n	8002c62 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	fab3 f383 	clz	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	210f      	movs	r1, #15
 8002c66:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	401a      	ands	r2, r3
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	0a1b      	lsrs	r3, r3, #8
 8002c72:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	61fb      	str	r3, [r7, #28]
  return result;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002c86:	2320      	movs	r3, #32
 8002c88:	e003      	b.n	8002c92 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002ca0:	bf00      	nop
 8002ca2:	372c      	adds	r7, #44	@ 0x2c
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	@ 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	617b      	str	r3, [r7, #20]
  return result;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <LL_GPIO_Init+0x2e>
    return 32U;
 8002cd6:	2320      	movs	r3, #32
 8002cd8:	e003      	b.n	8002ce2 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002ce4:	e057      	b.n	8002d96 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	2101      	movs	r1, #1
 8002cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d049      	beq.n	8002d90 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d003      	beq.n	8002d0c <LL_GPIO_Init+0x60>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d10d      	bne.n	8002d28 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	461a      	mov	r2, r3
 8002d12:	6a39      	ldr	r1, [r7, #32]
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff fed3 	bl	8002ac0 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	6a39      	ldr	r1, [r7, #32]
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff feb4 	bl	8002a90 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6a39      	ldr	r1, [r7, #32]
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ff02 	bl	8002b3a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d121      	bne.n	8002d82 <LL_GPIO_Init+0xd6>
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	fa93 f3a3 	rbit	r3, r3
 8002d48:	60bb      	str	r3, [r7, #8]
  return result;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <LL_GPIO_Init+0xac>
    return 32U;
 8002d54:	2320      	movs	r3, #32
 8002d56:	e003      	b.n	8002d60 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002d60:	2b07      	cmp	r3, #7
 8002d62:	d807      	bhi.n	8002d74 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6a39      	ldr	r1, [r7, #32]
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ff21 	bl	8002bb4 <LL_GPIO_SetAFPin_0_7>
 8002d72:	e006      	b.n	8002d82 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6a39      	ldr	r1, [r7, #32]
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ff56 	bl	8002c2e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	461a      	mov	r2, r3
 8002d88:	6a39      	ldr	r1, [r7, #32]
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff fe43 	bl	8002a16 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	3301      	adds	r3, #1
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1a0      	bne.n	8002ce6 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3728      	adds	r7, #40	@ 0x28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <LL_SPI_IsEnabled>:
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbe:	2b40      	cmp	r3, #64	@ 0x40
 8002dc0:	d101      	bne.n	8002dc6 <LL_SPI_IsEnabled+0x18>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <LL_SPI_IsEnabled+0x1a>
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	611a      	str	r2, [r3, #16]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ffd3 	bl	8002dae <LL_SPI_IsEnabled>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d139      	bne.n	8002e82 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e16:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	6811      	ldr	r1, [r2, #0]
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	6852      	ldr	r2, [r2, #4]
 8002e22:	4311      	orrs	r1, r2
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	6892      	ldr	r2, [r2, #8]
 8002e28:	4311      	orrs	r1, r2
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	68d2      	ldr	r2, [r2, #12]
 8002e2e:	4311      	orrs	r1, r2
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	6912      	ldr	r2, [r2, #16]
 8002e34:	4311      	orrs	r1, r2
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	6952      	ldr	r2, [r2, #20]
 8002e3a:	4311      	orrs	r1, r2
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	6992      	ldr	r2, [r2, #24]
 8002e40:	4311      	orrs	r1, r2
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	69d2      	ldr	r2, [r2, #28]
 8002e46:	4311      	orrs	r1, r2
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	6a12      	ldr	r2, [r2, #32]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f023 0204 	bic.w	r2, r3, #4
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	0c1b      	lsrs	r3, r3, #16
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e70:	d105      	bne.n	8002e7e <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e76:	4619      	mov	r1, r3
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff ffab 	bl	8002dd4 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	61da      	str	r2, [r3, #28]
  return status;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <memset>:
 8002e98:	4402      	add	r2, r0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d100      	bne.n	8002ea2 <memset+0xa>
 8002ea0:	4770      	bx	lr
 8002ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ea6:	e7f9      	b.n	8002e9c <memset+0x4>

08002ea8 <__libc_init_array>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	4d0d      	ldr	r5, [pc, #52]	@ (8002ee0 <__libc_init_array+0x38>)
 8002eac:	4c0d      	ldr	r4, [pc, #52]	@ (8002ee4 <__libc_init_array+0x3c>)
 8002eae:	1b64      	subs	r4, r4, r5
 8002eb0:	10a4      	asrs	r4, r4, #2
 8002eb2:	2600      	movs	r6, #0
 8002eb4:	42a6      	cmp	r6, r4
 8002eb6:	d109      	bne.n	8002ecc <__libc_init_array+0x24>
 8002eb8:	4d0b      	ldr	r5, [pc, #44]	@ (8002ee8 <__libc_init_array+0x40>)
 8002eba:	4c0c      	ldr	r4, [pc, #48]	@ (8002eec <__libc_init_array+0x44>)
 8002ebc:	f000 f818 	bl	8002ef0 <_init>
 8002ec0:	1b64      	subs	r4, r4, r5
 8002ec2:	10a4      	asrs	r4, r4, #2
 8002ec4:	2600      	movs	r6, #0
 8002ec6:	42a6      	cmp	r6, r4
 8002ec8:	d105      	bne.n	8002ed6 <__libc_init_array+0x2e>
 8002eca:	bd70      	pop	{r4, r5, r6, pc}
 8002ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed0:	4798      	blx	r3
 8002ed2:	3601      	adds	r6, #1
 8002ed4:	e7ee      	b.n	8002eb4 <__libc_init_array+0xc>
 8002ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eda:	4798      	blx	r3
 8002edc:	3601      	adds	r6, #1
 8002ede:	e7f2      	b.n	8002ec6 <__libc_init_array+0x1e>
 8002ee0:	0800312c 	.word	0x0800312c
 8002ee4:	0800312c 	.word	0x0800312c
 8002ee8:	0800312c 	.word	0x0800312c
 8002eec:	08003130 	.word	0x08003130

08002ef0 <_init>:
 8002ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef2:	bf00      	nop
 8002ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef6:	bc08      	pop	{r3}
 8002ef8:	469e      	mov	lr, r3
 8002efa:	4770      	bx	lr

08002efc <_fini>:
 8002efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efe:	bf00      	nop
 8002f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f02:	bc08      	pop	{r3}
 8002f04:	469e      	mov	lr, r3
 8002f06:	4770      	bx	lr
