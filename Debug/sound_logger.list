
sound_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002584  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002718  08002718  00003718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027d4  080027d4  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080027d4  080027d4  000037d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027dc  080027dc  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027dc  080027dc  000037dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027e0  080027e0  000037e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080027e4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000005c  08002840  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002840  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008307  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aed  00000000  00000000  0000c393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0000de80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000584  00000000  00000000  0000e618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017938  00000000  00000000  0000eb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008786  00000000  00000000  000264d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000929c7  00000000  00000000  0002ec5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1621  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001df4  00000000  00000000  000c1664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000c3458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002700 	.word	0x08002700

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	08002700 	.word	0x08002700

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050e:	2b00      	cmp	r3, #0
 8000510:	db0b      	blt.n	800052a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	f003 021f 	and.w	r2, r3, #31
 8000518:	4907      	ldr	r1, [pc, #28]	@ (8000538 <__NVIC_EnableIRQ+0x38>)
 800051a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051e:	095b      	lsrs	r3, r3, #5
 8000520:	2001      	movs	r0, #1
 8000522:	fa00 f202 	lsl.w	r2, r0, r2
 8000526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000e100 	.word	0xe000e100

0800053c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	6039      	str	r1, [r7, #0]
 8000546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054c:	2b00      	cmp	r3, #0
 800054e:	db0a      	blt.n	8000566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	b2da      	uxtb	r2, r3
 8000554:	490c      	ldr	r1, [pc, #48]	@ (8000588 <__NVIC_SetPriority+0x4c>)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	0112      	lsls	r2, r2, #4
 800055c:	b2d2      	uxtb	r2, r2
 800055e:	440b      	add	r3, r1
 8000560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000564:	e00a      	b.n	800057c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4908      	ldr	r1, [pc, #32]	@ (800058c <__NVIC_SetPriority+0x50>)
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	f003 030f 	and.w	r3, r3, #15
 8000572:	3b04      	subs	r3, #4
 8000574:	0112      	lsls	r2, r2, #4
 8000576:	b2d2      	uxtb	r2, r2
 8000578:	440b      	add	r3, r1
 800057a:	761a      	strb	r2, [r3, #24]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	e000e100 	.word	0xe000e100
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <LL_ADC_DMA_GetRegAddr>:

  return data_reg_addr;
}
#else
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument compilation warning */
  (void)Register;

  /* Retrieve address of register DR */
  return (uint32_t) & (ADCx->DR);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	334c      	adds	r3, #76	@ 0x4c
}
 800059e:	4618      	mov	r0, r3
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV6
  *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV8
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_ADCPRE, CommonClock);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	431a      	orrs	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	605a      	str	r2, [r3, #4]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	@ 0x24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	332c      	adds	r3, #44	@ 0x2c
 80005e0:	4619      	mov	r1, r3
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80005e8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80005ec:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	fa92 f2a2 	rbit	r2, r2
 80005f4:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	61ba      	str	r2, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80005fa:	69ba      	ldr	r2, [r7, #24]
 80005fc:	2a00      	cmp	r2, #0
 80005fe:	d101      	bne.n	8000604 <LL_ADC_REG_SetSequencerRanks+0x34>
  {
    return 32U;
 8000600:	2220      	movs	r2, #32
 8000602:	e003      	b.n	800060c <LL_ADC_REG_SetSequencerRanks+0x3c>
  }
  return __builtin_clz(value);
 8000604:	69ba      	ldr	r2, [r7, #24]
 8000606:	fab2 f282 	clz	r2, r2
 800060a:	b2d2      	uxtb	r2, r2
 800060c:	40d3      	lsrs	r3, r2
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	440b      	add	r3, r1
 8000612:	61fb      	str	r3, [r7, #28]

  MODIFY_REG(*preg,
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	f003 031f 	and.w	r3, r3, #31
 800061e:	211f      	movs	r1, #31
 8000620:	fa01 f303 	lsl.w	r3, r1, r3
 8000624:	43db      	mvns	r3, r3
 8000626:	401a      	ands	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f003 011f 	and.w	r1, r3, #31
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	f003 031f 	and.w	r3, r3, #31
 8000634:	fa01 f303 	lsl.w	r3, r1, r3
 8000638:	431a      	orrs	r2, r3
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800063e:	bf00      	nop
 8000640:	3724      	adds	r7, #36	@ 0x24
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800064a:	b480      	push	{r7}
 800064c:	b08f      	sub	sp, #60	@ 0x3c
 800064e:	af00      	add	r7, sp, #0
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	60b9      	str	r1, [r7, #8]
 8000654:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	330c      	adds	r3, #12
 800065a:	4619      	mov	r1, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000662:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000666:	617a      	str	r2, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	fa92 f2a2 	rbit	r2, r2
 800066e:	613a      	str	r2, [r7, #16]
  return result;
 8000670:	693a      	ldr	r2, [r7, #16]
 8000672:	61ba      	str	r2, [r7, #24]
  if (value == 0U)
 8000674:	69ba      	ldr	r2, [r7, #24]
 8000676:	2a00      	cmp	r2, #0
 8000678:	d101      	bne.n	800067e <LL_ADC_SetChannelSamplingTime+0x34>
    return 32U;
 800067a:	2220      	movs	r2, #32
 800067c:	e003      	b.n	8000686 <LL_ADC_SetChannelSamplingTime+0x3c>
  return __builtin_clz(value);
 800067e:	69ba      	ldr	r2, [r7, #24]
 8000680:	fab2 f282 	clz	r2, r2
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	40d3      	lsrs	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	440b      	add	r3, r1
 800068c:	637b      	str	r3, [r7, #52]	@ 0x34

  MODIFY_REG(*preg,
 800068e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8000698:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800069c:	6239      	str	r1, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800069e:	6a39      	ldr	r1, [r7, #32]
 80006a0:	fa91 f1a1 	rbit	r1, r1
 80006a4:	61f9      	str	r1, [r7, #28]
  return result;
 80006a6:	69f9      	ldr	r1, [r7, #28]
 80006a8:	6279      	str	r1, [r7, #36]	@ 0x24
  if (value == 0U)
 80006aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80006ac:	2900      	cmp	r1, #0
 80006ae:	d101      	bne.n	80006b4 <LL_ADC_SetChannelSamplingTime+0x6a>
    return 32U;
 80006b0:	2120      	movs	r1, #32
 80006b2:	e003      	b.n	80006bc <LL_ADC_SetChannelSamplingTime+0x72>
  return __builtin_clz(value);
 80006b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80006b6:	fab1 f181 	clz	r1, r1
 80006ba:	b2c9      	uxtb	r1, r1
 80006bc:	40cb      	lsrs	r3, r1
 80006be:	2107      	movs	r1, #7
 80006c0:	fa01 f303 	lsl.w	r3, r1, r3
 80006c4:	43db      	mvns	r3, r3
 80006c6:	401a      	ands	r2, r3
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80006ce:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80006d2:	62f9      	str	r1, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80006d6:	fa91 f1a1 	rbit	r1, r1
 80006da:	62b9      	str	r1, [r7, #40]	@ 0x28
  return result;
 80006dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80006de:	6339      	str	r1, [r7, #48]	@ 0x30
  if (value == 0U)
 80006e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80006e2:	2900      	cmp	r1, #0
 80006e4:	d101      	bne.n	80006ea <LL_ADC_SetChannelSamplingTime+0xa0>
    return 32U;
 80006e6:	2120      	movs	r1, #32
 80006e8:	e003      	b.n	80006f2 <LL_ADC_SetChannelSamplingTime+0xa8>
  return __builtin_clz(value);
 80006ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80006ec:	fab1 f181 	clz	r1, r1
 80006f0:	b2c9      	uxtb	r1, r1
 80006f2:	40cb      	lsrs	r3, r1
 80006f4:	6879      	ldr	r1, [r7, #4]
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	431a      	orrs	r2, r3
 80006fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80006fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8000700:	bf00      	nop
 8000702:	373c      	adds	r7, #60	@ 0x3c
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	f043 0201 	orr.w	r2, r3, #1
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	609a      	str	r2, [r3, #8]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	609a      	str	r2, [r3, #8]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000754:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000756:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000758:	4907      	ldr	r1, [pc, #28]	@ (8000778 <LL_APB2_GRP1_EnableClock+0x2c>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4313      	orrs	r3, r2
 800075e:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000760:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000762:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4013      	ands	r3, r2
 8000768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800076a:	68fb      	ldr	r3, [r7, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	40023800 	.word	0x40023800

0800077c <ADC_Driver_Init>:
		.dma_transf = LL_ADC_REG_DMA_TRANSFER_UNLIMITED,
		.dma_enabled = true,
	}
};

bool ADC_Driver_Init (eAdc_t adc) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b090      	sub	sp, #64	@ 0x40
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000786:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
	LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

    static_adc_lut[adc].enable_clock(static_adc_lut[adc].clock);
 80007a2:	79fa      	ldrb	r2, [r7, #7]
 80007a4:	4999      	ldr	r1, [pc, #612]	@ (8000a0c <ADC_Driver_Init+0x290>)
 80007a6:	4613      	mov	r3, r2
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	1a9b      	subs	r3, r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	440b      	add	r3, r1
 80007b0:	3314      	adds	r3, #20
 80007b2:	6819      	ldr	r1, [r3, #0]
 80007b4:	79fa      	ldrb	r2, [r7, #7]
 80007b6:	4895      	ldr	r0, [pc, #596]	@ (8000a0c <ADC_Driver_Init+0x290>)
 80007b8:	4613      	mov	r3, r2
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	1a9b      	subs	r3, r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4403      	add	r3, r0
 80007c2:	3310      	adds	r3, #16
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	4788      	blx	r1

    LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(static_adc_lut[adc].adc), static_adc_common_lut.common_clock);
 80007ca:	4b91      	ldr	r3, [pc, #580]	@ (8000a10 <ADC_Driver_Init+0x294>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4619      	mov	r1, r3
 80007d0:	4890      	ldr	r0, [pc, #576]	@ (8000a14 <ADC_Driver_Init+0x298>)
 80007d2:	f7ff feea 	bl	80005aa <LL_ADC_SetCommonClock>

	ADC_InitStruct.Resolution = static_adc_lut[adc].resolution;
 80007d6:	79fa      	ldrb	r2, [r7, #7]
 80007d8:	498c      	ldr	r1, [pc, #560]	@ (8000a0c <ADC_Driver_Init+0x290>)
 80007da:	4613      	mov	r3, r2
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	440b      	add	r3, r1
 80007e4:	3304      	adds	r3, #4
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	633b      	str	r3, [r7, #48]	@ 0x30
	ADC_InitStruct.DataAlignment = static_adc_lut[adc].data_align;
 80007ea:	79fa      	ldrb	r2, [r7, #7]
 80007ec:	4987      	ldr	r1, [pc, #540]	@ (8000a0c <ADC_Driver_Init+0x290>)
 80007ee:	4613      	mov	r3, r2
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	1a9b      	subs	r3, r3, r2
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	440b      	add	r3, r1
 80007f8:	3308      	adds	r3, #8
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	637b      	str	r3, [r7, #52]	@ 0x34
	ADC_InitStruct.SequencersScanMode = static_adc_lut[adc].seq_scan_mode;
 80007fe:	79fa      	ldrb	r2, [r7, #7]
 8000800:	4982      	ldr	r1, [pc, #520]	@ (8000a0c <ADC_Driver_Init+0x290>)
 8000802:	4613      	mov	r3, r2
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	1a9b      	subs	r3, r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	440b      	add	r3, r1
 800080c:	330c      	adds	r3, #12
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	63bb      	str	r3, [r7, #56]	@ 0x38

	if (LL_ADC_Init(static_adc_lut[adc].adc, &ADC_InitStruct) != SUCCESS) {
 8000812:	79fa      	ldrb	r2, [r7, #7]
 8000814:	497d      	ldr	r1, [pc, #500]	@ (8000a0c <ADC_Driver_Init+0x290>)
 8000816:	4613      	mov	r3, r2
 8000818:	011b      	lsls	r3, r3, #4
 800081a:	1a9b      	subs	r3, r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	440b      	add	r3, r1
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fb9d 	bl	8001f68 <LL_ADC_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <ADC_Driver_Init+0xbc>
		return false;
 8000834:	2300      	movs	r3, #0
 8000836:	e0e4      	b.n	8000a02 <ADC_Driver_Init+0x286>
	}

	ADC_REG_InitStruct.TriggerSource = static_adc_lut[adc].triggers_source;
 8000838:	79fa      	ldrb	r2, [r7, #7]
 800083a:	4974      	ldr	r1, [pc, #464]	@ (8000a0c <ADC_Driver_Init+0x290>)
 800083c:	4613      	mov	r3, r2
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	1a9b      	subs	r3, r3, r2
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	440b      	add	r3, r1
 8000846:	3320      	adds	r3, #32
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	61fb      	str	r3, [r7, #28]
	ADC_REG_InitStruct.SequencerLength = static_adc_lut[adc].seq_length;
 800084c:	79fa      	ldrb	r2, [r7, #7]
 800084e:	496f      	ldr	r1, [pc, #444]	@ (8000a0c <ADC_Driver_Init+0x290>)
 8000850:	4613      	mov	r3, r2
 8000852:	011b      	lsls	r3, r3, #4
 8000854:	1a9b      	subs	r3, r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	440b      	add	r3, r1
 800085a:	3324      	adds	r3, #36	@ 0x24
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	623b      	str	r3, [r7, #32]
	ADC_REG_InitStruct.SequencerDiscont = static_adc_lut[adc].seq_discont;
 8000860:	79fa      	ldrb	r2, [r7, #7]
 8000862:	496a      	ldr	r1, [pc, #424]	@ (8000a0c <ADC_Driver_Init+0x290>)
 8000864:	4613      	mov	r3, r2
 8000866:	011b      	lsls	r3, r3, #4
 8000868:	1a9b      	subs	r3, r3, r2
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	440b      	add	r3, r1
 800086e:	3328      	adds	r3, #40	@ 0x28
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
	ADC_REG_InitStruct.ContinuousMode = static_adc_lut[adc].continuous_mode;
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	4965      	ldr	r1, [pc, #404]	@ (8000a0c <ADC_Driver_Init+0x290>)
 8000878:	4613      	mov	r3, r2
 800087a:	011b      	lsls	r3, r3, #4
 800087c:	1a9b      	subs	r3, r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	440b      	add	r3, r1
 8000882:	332c      	adds	r3, #44	@ 0x2c
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	62bb      	str	r3, [r7, #40]	@ 0x28
	ADC_REG_InitStruct.DMATransfer = static_adc_lut[adc].dma_transf;
 8000888:	79fa      	ldrb	r2, [r7, #7]
 800088a:	4960      	ldr	r1, [pc, #384]	@ (8000a0c <ADC_Driver_Init+0x290>)
 800088c:	4613      	mov	r3, r2
 800088e:	011b      	lsls	r3, r3, #4
 8000890:	1a9b      	subs	r3, r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	440b      	add	r3, r1
 8000896:	3330      	adds	r3, #48	@ 0x30
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (LL_ADC_REG_Init(static_adc_lut[eAdc_1].adc, &ADC_REG_InitStruct) != SUCCESS) {
 800089c:	4b5b      	ldr	r3, [pc, #364]	@ (8000a0c <ADC_Driver_Init+0x290>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f107 021c 	add.w	r2, r7, #28
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 fb8a 	bl	8001fc0 <LL_ADC_REG_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <ADC_Driver_Init+0x13a>
		return false;
 80008b2:	2300      	movs	r3, #0
 80008b4:	e0a5      	b.n	8000a02 <ADC_Driver_Init+0x286>
	}

	for (eAdcChannel_t adc_ch = eAdcChannel_First; adc_ch < eAdcChannel_Last; adc_ch++) {
 80008b6:	2300      	movs	r3, #0
 80008b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80008bc:	e03f      	b.n	800093e <ADC_Driver_Init+0x1c2>
		if (static_adc_channel_lut[adc_ch].adc == adc) {
 80008be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008c2:	4a55      	ldr	r2, [pc, #340]	@ (8000a18 <ADC_Driver_Init+0x29c>)
 80008c4:	011b      	lsls	r3, r3, #4
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	79fa      	ldrb	r2, [r7, #7]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d131      	bne.n	8000934 <ADC_Driver_Init+0x1b8>
			LL_ADC_REG_SetSequencerRanks(static_adc_lut[adc].adc, static_adc_channel_lut[adc_ch].rank, static_adc_channel_lut[adc_ch].channel);
 80008d0:	79fa      	ldrb	r2, [r7, #7]
 80008d2:	494e      	ldr	r1, [pc, #312]	@ (8000a0c <ADC_Driver_Init+0x290>)
 80008d4:	4613      	mov	r3, r2
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	1a9b      	subs	r3, r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	440b      	add	r3, r1
 80008de:	6818      	ldr	r0, [r3, #0]
 80008e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008e4:	4a4c      	ldr	r2, [pc, #304]	@ (8000a18 <ADC_Driver_Init+0x29c>)
 80008e6:	011b      	lsls	r3, r3, #4
 80008e8:	4413      	add	r3, r2
 80008ea:	3304      	adds	r3, #4
 80008ec:	6819      	ldr	r1, [r3, #0]
 80008ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80008f2:	4a49      	ldr	r2, [pc, #292]	@ (8000a18 <ADC_Driver_Init+0x29c>)
 80008f4:	011b      	lsls	r3, r3, #4
 80008f6:	4413      	add	r3, r2
 80008f8:	3308      	adds	r3, #8
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	f7ff fe67 	bl	80005d0 <LL_ADC_REG_SetSequencerRanks>
			LL_ADC_SetChannelSamplingTime(static_adc_lut[adc].adc, static_adc_channel_lut[adc_ch].channel, static_adc_channel_lut[adc_ch].sampling_time);
 8000902:	79fa      	ldrb	r2, [r7, #7]
 8000904:	4941      	ldr	r1, [pc, #260]	@ (8000a0c <ADC_Driver_Init+0x290>)
 8000906:	4613      	mov	r3, r2
 8000908:	011b      	lsls	r3, r3, #4
 800090a:	1a9b      	subs	r3, r3, r2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	440b      	add	r3, r1
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000916:	4a40      	ldr	r2, [pc, #256]	@ (8000a18 <ADC_Driver_Init+0x29c>)
 8000918:	011b      	lsls	r3, r3, #4
 800091a:	4413      	add	r3, r2
 800091c:	3308      	adds	r3, #8
 800091e:	6819      	ldr	r1, [r3, #0]
 8000920:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000924:	4a3c      	ldr	r2, [pc, #240]	@ (8000a18 <ADC_Driver_Init+0x29c>)
 8000926:	011b      	lsls	r3, r3, #4
 8000928:	4413      	add	r3, r2
 800092a:	330c      	adds	r3, #12
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	f7ff fe8b 	bl	800064a <LL_ADC_SetChannelSamplingTime>
	for (eAdcChannel_t adc_ch = eAdcChannel_First; adc_ch < eAdcChannel_Last; adc_ch++) {
 8000934:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000938:	3301      	adds	r3, #1
 800093a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800093e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000942:	2b00      	cmp	r3, #0
 8000944:	d0bb      	beq.n	80008be <ADC_Driver_Init+0x142>
		}
	}

	if (static_adc_lut[adc].dma_enabled) {
 8000946:	79fa      	ldrb	r2, [r7, #7]
 8000948:	4930      	ldr	r1, [pc, #192]	@ (8000a0c <ADC_Driver_Init+0x290>)
 800094a:	4613      	mov	r3, r2
 800094c:	011b      	lsls	r3, r3, #4
 800094e:	1a9b      	subs	r3, r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	440b      	add	r3, r1
 8000954:	3334      	adds	r3, #52	@ 0x34
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d020      	beq.n	800099e <ADC_Driver_Init+0x222>
		sDmaInit_t dma_init = {0};
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
		dma_init.data_amount = eAdcChannel_Last;
 800096c:	2301      	movs	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
		dma_init.dest_addr = &dyn_adc_val;
 8000970:	4b2a      	ldr	r3, [pc, #168]	@ (8000a1c <ADC_Driver_Init+0x2a0>)
 8000972:	613b      	str	r3, [r7, #16]
		dma_init.periph_or_src_addr = (void*) LL_ADC_DMA_GetRegAddr(static_adc_lut[adc].adc, LL_ADC_DMA_REG_REGULAR_DATA);
 8000974:	79fa      	ldrb	r2, [r7, #7]
 8000976:	4925      	ldr	r1, [pc, #148]	@ (8000a0c <ADC_Driver_Init+0x290>)
 8000978:	4613      	mov	r3, r2
 800097a:	011b      	lsls	r3, r3, #4
 800097c:	1a9b      	subs	r3, r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	440b      	add	r3, r1
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fe02 	bl	8000590 <LL_ADC_DMA_GetRegAddr>
 800098c:	4603      	mov	r3, r0
 800098e:	60fb      	str	r3, [r7, #12]
		dma_init.dma_stream = eDmaStream_1;
 8000990:	2300      	movs	r3, #0
 8000992:	723b      	strb	r3, [r7, #8]
		DMA_Driver_Init(&dma_init);
 8000994:	f107 0308 	add.w	r3, r7, #8
 8000998:	4618      	mov	r0, r3
 800099a:	f000 f97d 	bl	8000c98 <DMA_Driver_Init>
	}

	LL_ADC_Enable(static_adc_lut[adc].adc);
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	491a      	ldr	r1, [pc, #104]	@ (8000a0c <ADC_Driver_Init+0x290>)
 80009a2:	4613      	mov	r3, r2
 80009a4:	011b      	lsls	r3, r3, #4
 80009a6:	1a9b      	subs	r3, r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	440b      	add	r3, r1
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff feac 	bl	800070c <LL_ADC_Enable>
	DMA_Driver_EnableStream(eDmaStream_1);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f000 fadb 	bl	8000f70 <DMA_Driver_EnableStream>

    NVIC_SetPriority(static_adc_lut[adc].irqn, static_adc_lut[adc].irqn_priority);
 80009ba:	79fa      	ldrb	r2, [r7, #7]
 80009bc:	4913      	ldr	r1, [pc, #76]	@ (8000a0c <ADC_Driver_Init+0x290>)
 80009be:	4613      	mov	r3, r2
 80009c0:	011b      	lsls	r3, r3, #4
 80009c2:	1a9b      	subs	r3, r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	440b      	add	r3, r1
 80009c8:	3335      	adds	r3, #53	@ 0x35
 80009ca:	f993 0000 	ldrsb.w	r0, [r3]
 80009ce:	79fa      	ldrb	r2, [r7, #7]
 80009d0:	490e      	ldr	r1, [pc, #56]	@ (8000a0c <ADC_Driver_Init+0x290>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	011b      	lsls	r3, r3, #4
 80009d6:	1a9b      	subs	r3, r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	440b      	add	r3, r1
 80009dc:	3338      	adds	r3, #56	@ 0x38
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	f7ff fdab 	bl	800053c <__NVIC_SetPriority>
    NVIC_EnableIRQ(static_adc_lut[adc].irqn);
 80009e6:	79fa      	ldrb	r2, [r7, #7]
 80009e8:	4908      	ldr	r1, [pc, #32]	@ (8000a0c <ADC_Driver_Init+0x290>)
 80009ea:	4613      	mov	r3, r2
 80009ec:	011b      	lsls	r3, r3, #4
 80009ee:	1a9b      	subs	r3, r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	440b      	add	r3, r1
 80009f4:	3335      	adds	r3, #53	@ 0x35
 80009f6:	f993 3000 	ldrsb.w	r3, [r3]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fd80 	bl	8000500 <__NVIC_EnableIRQ>

	return true;
 8000a00:	2301      	movs	r3, #1
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3740      	adds	r7, #64	@ 0x40
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000014 	.word	0x20000014
 8000a10:	20000000 	.word	0x20000000
 8000a14:	40012300 	.word	0x40012300
 8000a18:	20000004 	.word	0x20000004
 8000a1c:	20000078 	.word	0x20000078

08000a20 <ADC_Driver_ReadChannels>:

bool ADC_Driver_ReadChannels (eAdc_t adc) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
    if (adc >= eAdc_Last) {
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <ADC_Driver_ReadChannels+0x14>
        return false;
 8000a30:	2300      	movs	r3, #0
 8000a32:	e00b      	b.n	8000a4c <ADC_Driver_ReadChannels+0x2c>
    }

    LL_ADC_REG_StartConversionSWStart(static_adc_lut[adc].adc);
 8000a34:	79fa      	ldrb	r2, [r7, #7]
 8000a36:	4907      	ldr	r1, [pc, #28]	@ (8000a54 <ADC_Driver_ReadChannels+0x34>)
 8000a38:	4613      	mov	r3, r2
 8000a3a:	011b      	lsls	r3, r3, #4
 8000a3c:	1a9b      	subs	r3, r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	440b      	add	r3, r1
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fe71 	bl	800072c <LL_ADC_REG_StartConversionSWStart>

    return true;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000014 	.word	0x20000014

08000a58 <ADC_Driver_GetChannelValue>:

bool ADC_Driver_GetChannelValue (eAdcChannel_t channel, uint16_t *value) {
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
    if (channel >= eAdcChannel_Last) {
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <ADC_Driver_GetChannelValue+0x16>
        return false;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e00b      	b.n	8000a86 <ADC_Driver_GetChannelValue+0x2e>
    }
    if (value == NULL) {
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <ADC_Driver_GetChannelValue+0x20>
        return false;
 8000a74:	2300      	movs	r3, #0
 8000a76:	e006      	b.n	8000a86 <ADC_Driver_GetChannelValue+0x2e>
    }

    *value = dyn_adc_val[channel].value;
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	4a06      	ldr	r2, [pc, #24]	@ (8000a94 <ADC_Driver_GetChannelValue+0x3c>)
 8000a7c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	801a      	strh	r2, [r3, #0]

    return true;
 8000a84:	2301      	movs	r3, #1
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000078 	.word	0x20000078

08000a98 <__NVIC_EnableIRQ>:
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	db0b      	blt.n	8000ac2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	f003 021f 	and.w	r2, r3, #31
 8000ab0:	4907      	ldr	r1, [pc, #28]	@ (8000ad0 <__NVIC_EnableIRQ+0x38>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	095b      	lsrs	r3, r3, #5
 8000ab8:	2001      	movs	r0, #1
 8000aba:	fa00 f202 	lsl.w	r2, r0, r2
 8000abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100

08000ad4 <__NVIC_SetPriority>:
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db0a      	blt.n	8000afe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	490c      	ldr	r1, [pc, #48]	@ (8000b20 <__NVIC_SetPriority+0x4c>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000afc:	e00a      	b.n	8000b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4908      	ldr	r1, [pc, #32]	@ (8000b24 <__NVIC_SetPriority+0x50>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	3b04      	subs	r3, #4
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	440b      	add	r3, r1
 8000b12:	761a      	strb	r2, [r3, #24]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000e100 	.word	0xe000e100
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <LL_AHB1_GRP1_EnableClock>:
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b34:	4907      	ldr	r1, [pc, #28]	@ (8000b54 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4013      	ands	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40023800 	.word	0x40023800

08000b58 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8000b62:	4a0c      	ldr	r2, [pc, #48]	@ (8000b94 <LL_DMA_EnableStream+0x3c>)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4413      	add	r3, r2
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4908      	ldr	r1, [pc, #32]	@ (8000b94 <LL_DMA_EnableStream+0x3c>)
 8000b74:	683a      	ldr	r2, [r7, #0]
 8000b76:	440a      	add	r2, r1
 8000b78:	7812      	ldrb	r2, [r2, #0]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	440a      	add	r2, r1
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6013      	str	r3, [r2, #0]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	08002718 	.word	0x08002718

08000b98 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd4 <LL_DMA_DisableFifoMode+0x3c>)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	4908      	ldr	r1, [pc, #32]	@ (8000bd4 <LL_DMA_DisableFifoMode+0x3c>)
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	440a      	add	r2, r1
 8000bb8:	7812      	ldrb	r2, [r2, #0]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	440a      	add	r2, r1
 8000bc0:	f023 0304 	bic.w	r3, r3, #4
 8000bc4:	6153      	str	r3, [r2, #20]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	08002718 	.word	0x08002718

08000bd8 <LL_DMA_EnableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8000be2:	4a0c      	ldr	r2, [pc, #48]	@ (8000c14 <LL_DMA_EnableFifoMode+0x3c>)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4413      	add	r3, r2
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	4908      	ldr	r1, [pc, #32]	@ (8000c14 <LL_DMA_EnableFifoMode+0x3c>)
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	440a      	add	r2, r1
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	440a      	add	r2, r1
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	6153      	str	r3, [r2, #20]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	08002718 	.word	0x08002718

08000c18 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000c22:	4a0c      	ldr	r2, [pc, #48]	@ (8000c54 <LL_DMA_EnableIT_TC+0x3c>)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4413      	add	r3, r2
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4908      	ldr	r1, [pc, #32]	@ (8000c54 <LL_DMA_EnableIT_TC+0x3c>)
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	440a      	add	r2, r1
 8000c38:	7812      	ldrb	r2, [r2, #0]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	440a      	add	r2, r1
 8000c40:	f043 0310 	orr.w	r3, r3, #16
 8000c44:	6013      	str	r3, [r2, #0]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	08002718 	.word	0x08002718

08000c58 <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000c62:	4a0c      	ldr	r2, [pc, #48]	@ (8000c94 <LL_DMA_DisableIT_TC+0x3c>)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4413      	add	r3, r2
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4908      	ldr	r1, [pc, #32]	@ (8000c94 <LL_DMA_DisableIT_TC+0x3c>)
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	440a      	add	r2, r1
 8000c78:	7812      	ldrb	r2, [r2, #0]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	440a      	add	r2, r1
 8000c80:	f023 0310 	bic.w	r3, r3, #16
 8000c84:	6013      	str	r3, [r2, #0]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	08002718 	.word	0x08002718

08000c98 <DMA_Driver_Init>:
	[eDmaStream_1] = {
		.IT_cb = NULL,
	}
};

bool DMA_Driver_Init (sDmaInit_t *dma_init_data) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b092      	sub	sp, #72	@ 0x48
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	if ((eDmaStream_Last <= dma_init_data->dma_stream) || (eDmaStream_First > dma_init_data->dma_stream)) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <DMA_Driver_Init+0x14>
		return false;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e159      	b.n	8000f60 <DMA_Driver_Init+0x2c8>
	}

	LL_DMA_InitTypeDef DMA_InitStruct = {0};
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	223c      	movs	r2, #60	@ 0x3c
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f001 fcf7 	bl	80026a8 <memset>

	eDmaStream_t dma_stream = dma_init_data->dma_stream;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    static_dma_stream_lut[dma_stream].enable_clock(static_dma_stream_lut[dma_stream].clock);
 8000cc2:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000cc6:	49a8      	ldr	r1, [pc, #672]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000cc8:	4613      	mov	r3, r2
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	1a9b      	subs	r3, r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	3334      	adds	r3, #52	@ 0x34
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cda:	4610      	mov	r0, r2
 8000cdc:	4798      	blx	r3

    dyn_dma_lut[dma_stream].buf_size = dma_init_data->data_amount;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68da      	ldr	r2, [r3, #12]
 8000ce2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000ce6:	b291      	uxth	r1, r2
 8000ce8:	4aa0      	ldr	r2, [pc, #640]	@ (8000f6c <DMA_Driver_Init+0x2d4>)
 8000cea:	011b      	lsls	r3, r3, #4
 8000cec:	4413      	add	r3, r2
 8000cee:	460a      	mov	r2, r1
 8000cf0:	801a      	strh	r2, [r3, #0]
    dyn_dma_lut[dma_stream].periph_or_src_addr = dma_init_data->periph_or_src_addr;
 8000cf2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	6852      	ldr	r2, [r2, #4]
 8000cfa:	499c      	ldr	r1, [pc, #624]	@ (8000f6c <DMA_Driver_Init+0x2d4>)
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	440b      	add	r3, r1
 8000d00:	3304      	adds	r3, #4
 8000d02:	601a      	str	r2, [r3, #0]
    dyn_dma_lut[dma_stream].dst_addr = dma_init_data->dest_addr;
 8000d04:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	6892      	ldr	r2, [r2, #8]
 8000d0c:	4997      	ldr	r1, [pc, #604]	@ (8000f6c <DMA_Driver_Init+0x2d4>)
 8000d0e:	011b      	lsls	r3, r3, #4
 8000d10:	440b      	add	r3, r1
 8000d12:	3308      	adds	r3, #8
 8000d14:	601a      	str	r2, [r3, #0]

    DMA_InitStruct.Channel = static_dma_stream_lut[dma_stream].dma_channel;
 8000d16:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000d1a:	4993      	ldr	r1, [pc, #588]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	1a9b      	subs	r3, r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	440b      	add	r3, r1
 8000d26:	3308      	adds	r3, #8
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    DMA_InitStruct.Direction = static_dma_stream_lut[dma_stream].direction;
 8000d2c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000d30:	498d      	ldr	r1, [pc, #564]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000d32:	4613      	mov	r3, r2
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	330c      	adds	r3, #12
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	613b      	str	r3, [r7, #16]
    DMA_InitStruct.Priority = static_dma_stream_lut[dma_stream].priority;
 8000d42:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000d46:	4988      	ldr	r1, [pc, #544]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000d48:	4613      	mov	r3, r2
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	440b      	add	r3, r1
 8000d52:	3310      	adds	r3, #16
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	633b      	str	r3, [r7, #48]	@ 0x30
    DMA_InitStruct.Mode = static_dma_stream_lut[dma_stream].mode;
 8000d58:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000d5c:	4982      	ldr	r1, [pc, #520]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	1a9b      	subs	r3, r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	440b      	add	r3, r1
 8000d68:	3314      	adds	r3, #20
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	617b      	str	r3, [r7, #20]
    DMA_InitStruct.PeriphOrM2MSrcIncMode = static_dma_stream_lut[dma_stream].periph_inc_mode;
 8000d6e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000d72:	497d      	ldr	r1, [pc, #500]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000d74:	4613      	mov	r3, r2
 8000d76:	011b      	lsls	r3, r3, #4
 8000d78:	1a9b      	subs	r3, r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	3318      	adds	r3, #24
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	61bb      	str	r3, [r7, #24]
    DMA_InitStruct.MemoryOrM2MDstIncMode = static_dma_stream_lut[dma_stream].mem_inc_mode;
 8000d84:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000d88:	4977      	ldr	r1, [pc, #476]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	1a9b      	subs	r3, r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	440b      	add	r3, r1
 8000d94:	331c      	adds	r3, #28
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	61fb      	str	r3, [r7, #28]
    DMA_InitStruct.PeriphOrM2MSrcDataSize = static_dma_stream_lut[dma_stream].periph_size;
 8000d9a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000d9e:	4972      	ldr	r1, [pc, #456]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000da0:	4613      	mov	r3, r2
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	1a9b      	subs	r3, r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	440b      	add	r3, r1
 8000daa:	3320      	adds	r3, #32
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	623b      	str	r3, [r7, #32]
    DMA_InitStruct.MemoryOrM2MDstDataSize = static_dma_stream_lut[dma_stream].mem_size;
 8000db0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000db4:	496c      	ldr	r1, [pc, #432]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000db6:	4613      	mov	r3, r2
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	1a9b      	subs	r3, r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	3324      	adds	r3, #36	@ 0x24
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    DMA_InitStruct.NbData = dyn_dma_lut[dma_stream].buf_size;
 8000dc6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000dca:	4a68      	ldr	r2, [pc, #416]	@ (8000f6c <DMA_Driver_Init+0x2d4>)
 8000dcc:	011b      	lsls	r3, r3, #4
 8000dce:	4413      	add	r3, r2
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    DMA_InitStruct.PeriphOrM2MSrcAddress = (uint32_t)dyn_dma_lut[dma_stream].periph_or_src_addr;
 8000dd4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000dd8:	4a64      	ldr	r2, [pc, #400]	@ (8000f6c <DMA_Driver_Init+0x2d4>)
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	4413      	add	r3, r2
 8000dde:	3304      	adds	r3, #4
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	60bb      	str	r3, [r7, #8]
    DMA_InitStruct.MemoryOrM2MDstAddress = (uint32_t)dyn_dma_lut[dma_stream].dst_addr;
 8000de4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000de8:	4a60      	ldr	r2, [pc, #384]	@ (8000f6c <DMA_Driver_Init+0x2d4>)
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	4413      	add	r3, r2
 8000dee:	3308      	adds	r3, #8
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	60fb      	str	r3, [r7, #12]

    if (LL_DMA_Init(static_dma_stream_lut[dma_stream].dma, static_dma_stream_lut[dma_stream].dma_stream, &DMA_InitStruct) != SUCCESS) {
 8000df4:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000df8:	495b      	ldr	r1, [pc, #364]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	440b      	add	r3, r1
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000e0a:	4957      	ldr	r1, [pc, #348]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	011b      	lsls	r3, r3, #4
 8000e10:	1a9b      	subs	r3, r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	440b      	add	r3, r1
 8000e16:	3304      	adds	r3, #4
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f107 0208 	add.w	r2, r7, #8
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f001 fa1c 	bl	800225c <LL_DMA_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <DMA_Driver_Init+0x196>
    	return false;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e098      	b.n	8000f60 <DMA_Driver_Init+0x2c8>
    }

    if (static_dma_stream_lut[dma_stream].fifo) {
 8000e2e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000e32:	494d      	ldr	r1, [pc, #308]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000e34:	4613      	mov	r3, r2
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	1a9b      	subs	r3, r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	3328      	adds	r3, #40	@ 0x28
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d016      	beq.n	8000e74 <DMA_Driver_Init+0x1dc>
    	LL_DMA_EnableFifoMode(static_dma_stream_lut[dma_stream].dma, static_dma_stream_lut[dma_stream].dma_stream);
 8000e46:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000e4a:	4947      	ldr	r1, [pc, #284]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	011b      	lsls	r3, r3, #4
 8000e50:	1a9b      	subs	r3, r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	6818      	ldr	r0, [r3, #0]
 8000e58:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000e5c:	4942      	ldr	r1, [pc, #264]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000e5e:	4613      	mov	r3, r2
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	3304      	adds	r3, #4
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f7ff feb3 	bl	8000bd8 <LL_DMA_EnableFifoMode>
 8000e72:	e015      	b.n	8000ea0 <DMA_Driver_Init+0x208>
    } else {
    	LL_DMA_DisableFifoMode(static_dma_stream_lut[dma_stream].dma, static_dma_stream_lut[dma_stream].dma_stream);
 8000e74:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000e78:	493b      	ldr	r1, [pc, #236]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	1a9b      	subs	r3, r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	6818      	ldr	r0, [r3, #0]
 8000e86:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000e8a:	4937      	ldr	r1, [pc, #220]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	1a9b      	subs	r3, r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	3304      	adds	r3, #4
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f7ff fe7c 	bl	8000b98 <LL_DMA_DisableFifoMode>
    }

    if (static_dma_stream_lut[dma_stream].dma_interrupt) {
 8000ea0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000ea4:	4930      	ldr	r1, [pc, #192]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	011b      	lsls	r3, r3, #4
 8000eaa:	1a9b      	subs	r3, r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	3329      	adds	r3, #41	@ 0x29
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d03c      	beq.n	8000f32 <DMA_Driver_Init+0x29a>
    	LL_DMA_EnableIT_TC(static_dma_stream_lut[dma_stream].dma, static_dma_stream_lut[dma_stream].dma_stream);
 8000eb8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000ebc:	492a      	ldr	r1, [pc, #168]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	1a9b      	subs	r3, r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000ece:	4926      	ldr	r1, [pc, #152]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	1a9b      	subs	r3, r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	3304      	adds	r3, #4
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f7ff fe9a 	bl	8000c18 <LL_DMA_EnableIT_TC>
    	NVIC_SetPriority(static_dma_stream_lut[dma_stream].dma_irq, static_dma_stream_lut[dma_stream].irq_prio);
 8000ee4:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000ee8:	491f      	ldr	r1, [pc, #124]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000eea:	4613      	mov	r3, r2
 8000eec:	011b      	lsls	r3, r3, #4
 8000eee:	1a9b      	subs	r3, r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	332c      	adds	r3, #44	@ 0x2c
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	b258      	sxtb	r0, r3
 8000efa:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000efe:	491a      	ldr	r1, [pc, #104]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000f00:	4613      	mov	r3, r2
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	1a9b      	subs	r3, r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	440b      	add	r3, r1
 8000f0a:	3330      	adds	r3, #48	@ 0x30
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f7ff fde0 	bl	8000ad4 <__NVIC_SetPriority>
		NVIC_EnableIRQ(static_dma_stream_lut[dma_stream].dma_irq);
 8000f14:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000f18:	4913      	ldr	r1, [pc, #76]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	440b      	add	r3, r1
 8000f24:	332c      	adds	r3, #44	@ 0x2c
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fdb4 	bl	8000a98 <__NVIC_EnableIRQ>
 8000f30:	e015      	b.n	8000f5e <DMA_Driver_Init+0x2c6>
    } else {
    	LL_DMA_DisableIT_TC(static_dma_stream_lut[dma_stream].dma, static_dma_stream_lut[dma_stream].dma_stream);
 8000f32:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000f36:	490c      	ldr	r1, [pc, #48]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000f38:	4613      	mov	r3, r2
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	1a9b      	subs	r3, r3, r2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	440b      	add	r3, r1
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000f48:	4907      	ldr	r1, [pc, #28]	@ (8000f68 <DMA_Driver_Init+0x2d0>)
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	1a9b      	subs	r3, r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	3304      	adds	r3, #4
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f7ff fe7d 	bl	8000c58 <LL_DMA_DisableIT_TC>
    }

    return true;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3748      	adds	r7, #72	@ 0x48
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	08002720 	.word	0x08002720
 8000f6c:	2000007c 	.word	0x2000007c

08000f70 <DMA_Driver_EnableStream>:

bool DMA_Driver_EnableStream (eDmaStream_t dma_stream) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	if ((eDmaStream_Last <= dma_stream) || (eDmaStream_First > dma_stream)) {
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <DMA_Driver_EnableStream+0x14>
		return false;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e014      	b.n	8000fae <DMA_Driver_EnableStream+0x3e>
	}

    LL_DMA_EnableStream(static_dma_stream_lut[dma_stream].dma, static_dma_stream_lut[dma_stream].dma_stream);
 8000f84:	79fa      	ldrb	r2, [r7, #7]
 8000f86:	490c      	ldr	r1, [pc, #48]	@ (8000fb8 <DMA_Driver_EnableStream+0x48>)
 8000f88:	4613      	mov	r3, r2
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	79fa      	ldrb	r2, [r7, #7]
 8000f96:	4908      	ldr	r1, [pc, #32]	@ (8000fb8 <DMA_Driver_EnableStream+0x48>)
 8000f98:	4613      	mov	r3, r2
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	1a9b      	subs	r3, r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f7ff fdd6 	bl	8000b58 <LL_DMA_EnableStream>
    return true;
 8000fac:	2301      	movs	r3, #1
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	08002720 	.word	0x08002720

08000fbc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	041a      	lsls	r2, r3, #16
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	619a      	str	r2, [r3, #24]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <LL_AHB1_GRP1_EnableClock>:
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fe4:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fe8:	4907      	ldr	r1, [pc, #28]	@ (8001008 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ff2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	40023800 	.word	0x40023800

0800100c <GPIO_Driver_Init>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool GPIO_Driver_Init (void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
    LL_GPIO_InitTypeDef gpio_init_struct = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	615a      	str	r2, [r3, #20]
    bool is_init_successful = true;
 8001022:	2301      	movs	r3, #1
 8001024:	77fb      	strb	r3, [r7, #31]

    for (eGpioPin_t pin = eGpioPin_First; pin < eGpioPin_Last; pin++) {
 8001026:	2300      	movs	r3, #0
 8001028:	77bb      	strb	r3, [r7, #30]
 800102a:	e053      	b.n	80010d4 <GPIO_Driver_Init+0xc8>
        LL_AHB1_GRP1_EnableClock(g_static_gpio_lut[pin].clock);
 800102c:	7fbb      	ldrb	r3, [r7, #30]
 800102e:	4a2d      	ldr	r2, [pc, #180]	@ (80010e4 <GPIO_Driver_Init+0xd8>)
 8001030:	015b      	lsls	r3, r3, #5
 8001032:	4413      	add	r3, r2
 8001034:	3318      	adds	r3, #24
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ffcf 	bl	8000fdc <LL_AHB1_GRP1_EnableClock>
        LL_GPIO_ResetOutputPin(g_static_gpio_lut[pin].port, g_static_gpio_lut[pin].pin);
 800103e:	7fbb      	ldrb	r3, [r7, #30]
 8001040:	4a28      	ldr	r2, [pc, #160]	@ (80010e4 <GPIO_Driver_Init+0xd8>)
 8001042:	015b      	lsls	r3, r3, #5
 8001044:	4413      	add	r3, r2
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	7fbb      	ldrb	r3, [r7, #30]
 800104a:	4926      	ldr	r1, [pc, #152]	@ (80010e4 <GPIO_Driver_Init+0xd8>)
 800104c:	015b      	lsls	r3, r3, #5
 800104e:	440b      	add	r3, r1
 8001050:	3304      	adds	r3, #4
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4619      	mov	r1, r3
 8001056:	4610      	mov	r0, r2
 8001058:	f7ff ffb0 	bl	8000fbc <LL_GPIO_ResetOutputPin>

        gpio_init_struct.Pin = g_static_gpio_lut[pin].pin;
 800105c:	7fbb      	ldrb	r3, [r7, #30]
 800105e:	4a21      	ldr	r2, [pc, #132]	@ (80010e4 <GPIO_Driver_Init+0xd8>)
 8001060:	015b      	lsls	r3, r3, #5
 8001062:	4413      	add	r3, r2
 8001064:	3304      	adds	r3, #4
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	607b      	str	r3, [r7, #4]
        gpio_init_struct.Mode = g_static_gpio_lut[pin].mode;
 800106a:	7fbb      	ldrb	r3, [r7, #30]
 800106c:	4a1d      	ldr	r2, [pc, #116]	@ (80010e4 <GPIO_Driver_Init+0xd8>)
 800106e:	015b      	lsls	r3, r3, #5
 8001070:	4413      	add	r3, r2
 8001072:	3308      	adds	r3, #8
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	60bb      	str	r3, [r7, #8]
        gpio_init_struct.Speed = g_static_gpio_lut[pin].speed;
 8001078:	7fbb      	ldrb	r3, [r7, #30]
 800107a:	4a1a      	ldr	r2, [pc, #104]	@ (80010e4 <GPIO_Driver_Init+0xd8>)
 800107c:	015b      	lsls	r3, r3, #5
 800107e:	4413      	add	r3, r2
 8001080:	330c      	adds	r3, #12
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
        gpio_init_struct.OutputType = g_static_gpio_lut[pin].output;
 8001086:	7fbb      	ldrb	r3, [r7, #30]
 8001088:	4a16      	ldr	r2, [pc, #88]	@ (80010e4 <GPIO_Driver_Init+0xd8>)
 800108a:	015b      	lsls	r3, r3, #5
 800108c:	4413      	add	r3, r2
 800108e:	3310      	adds	r3, #16
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	613b      	str	r3, [r7, #16]
        gpio_init_struct.Pull = g_static_gpio_lut[pin].pull;
 8001094:	7fbb      	ldrb	r3, [r7, #30]
 8001096:	4a13      	ldr	r2, [pc, #76]	@ (80010e4 <GPIO_Driver_Init+0xd8>)
 8001098:	015b      	lsls	r3, r3, #5
 800109a:	4413      	add	r3, r2
 800109c:	3314      	adds	r3, #20
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	617b      	str	r3, [r7, #20]
        gpio_init_struct.Alternate = g_static_gpio_lut[pin].alternate;
 80010a2:	7fbb      	ldrb	r3, [r7, #30]
 80010a4:	4a0f      	ldr	r2, [pc, #60]	@ (80010e4 <GPIO_Driver_Init+0xd8>)
 80010a6:	015b      	lsls	r3, r3, #5
 80010a8:	4413      	add	r3, r2
 80010aa:	331c      	adds	r3, #28
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	61bb      	str	r3, [r7, #24]

        if (LL_GPIO_Init(g_static_gpio_lut[pin].port, &gpio_init_struct) != SUCCESS) {
 80010b0:	7fbb      	ldrb	r3, [r7, #30]
 80010b2:	4a0c      	ldr	r2, [pc, #48]	@ (80010e4 <GPIO_Driver_Init+0xd8>)
 80010b4:	015b      	lsls	r3, r3, #5
 80010b6:	4413      	add	r3, r2
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	1d3a      	adds	r2, r7, #4
 80010bc:	4611      	mov	r1, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 fa71 	bl	80025a6 <LL_GPIO_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <GPIO_Driver_Init+0xc2>
            is_init_successful = false;
 80010ca:	2300      	movs	r3, #0
 80010cc:	77fb      	strb	r3, [r7, #31]
    for (eGpioPin_t pin = eGpioPin_First; pin < eGpioPin_Last; pin++) {
 80010ce:	7fbb      	ldrb	r3, [r7, #30]
 80010d0:	3301      	adds	r3, #1
 80010d2:	77bb      	strb	r3, [r7, #30]
 80010d4:	7fbb      	ldrb	r3, [r7, #30]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d9a8      	bls.n	800102c <GPIO_Driver_Init+0x20>
        }
    }

    return is_init_successful;
 80010da:	7ffb      	ldrb	r3, [r7, #31]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3720      	adds	r7, #32
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	0800275c 	.word	0x0800275c

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ee:	f000 f935 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f2:	f000 f827 	bl	8001144 <SystemClock_Config>
//  MX_GPIO_Init();
//  MX_DMA_Init();
//  MX_USART2_UART_Init();
//  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  if (GPIO_Driver_Init() != 1) {
 80010f6:	f7ff ff89 	bl	800100c <GPIO_Driver_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	f083 0301 	eor.w	r3, r3, #1
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <main+0x22>
	  Error_Handler();
 8001106:	f000 f889 	bl	800121c <Error_Handler>
  }

  if (ADC_Driver_Init(eAdc_1) != 1) {
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff fb36 	bl	800077c <ADC_Driver_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	f083 0301 	eor.w	r3, r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <main+0x38>
	  Error_Handler();
 800111c:	f000 f87e 	bl	800121c <Error_Handler>
  }
  /* USER CODE END 2 */

  uint16_t value = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	80fb      	strh	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ADC_Driver_ReadChannels(eAdc_1);
 8001124:	2000      	movs	r0, #0
 8001126:	f7ff fc7b 	bl	8000a20 <ADC_Driver_ReadChannels>
	  HAL_Delay(100);
 800112a:	2064      	movs	r0, #100	@ 0x64
 800112c:	f000 f988 	bl	8001440 <HAL_Delay>
	  ADC_Driver_GetChannelValue(eAdcChannel_1, &value);
 8001130:	1dbb      	adds	r3, r7, #6
 8001132:	4619      	mov	r1, r3
 8001134:	2000      	movs	r0, #0
 8001136:	f7ff fc8f 	bl	8000a58 <ADC_Driver_GetChannelValue>
	  HAL_Delay(10);
 800113a:	200a      	movs	r0, #10
 800113c:	f000 f980 	bl	8001440 <HAL_Delay>
	  ADC_Driver_ReadChannels(eAdc_1);
 8001140:	bf00      	nop
 8001142:	e7ef      	b.n	8001124 <main+0x3c>

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	@ 0x50
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0320 	add.w	r3, r7, #32
 800114e:	2230      	movs	r2, #48	@ 0x30
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f001 faa8 	bl	80026a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <SystemClock_Config+0xd0>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001170:	4a28      	ldr	r2, [pc, #160]	@ (8001214 <SystemClock_Config+0xd0>)
 8001172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001176:	6413      	str	r3, [r2, #64]	@ 0x40
 8001178:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <SystemClock_Config+0xd0>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <SystemClock_Config+0xd4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001190:	4a21      	ldr	r2, [pc, #132]	@ (8001218 <SystemClock_Config+0xd4>)
 8001192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b1f      	ldr	r3, [pc, #124]	@ (8001218 <SystemClock_Config+0xd4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a4:	2302      	movs	r3, #2
 80011a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a8:	2301      	movs	r3, #1
 80011aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ac:	2310      	movs	r3, #16
 80011ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b0:	2302      	movs	r3, #2
 80011b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b4:	2300      	movs	r3, #0
 80011b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011b8:	2310      	movs	r3, #16
 80011ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011bc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011c2:	2304      	movs	r3, #4
 80011c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011c6:	2307      	movs	r3, #7
 80011c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ca:	f107 0320 	add.w	r3, r7, #32
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fa40 	bl	8001654 <HAL_RCC_OscConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011da:	f000 f81f 	bl	800121c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011de:	230f      	movs	r3, #15
 80011e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e2:	2302      	movs	r3, #2
 80011e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2102      	movs	r1, #2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fca2 	bl	8001b44 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001206:	f000 f809 	bl	800121c <Error_Handler>
  }
}
 800120a:	bf00      	nop
 800120c:	3750      	adds	r7, #80	@ 0x50
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800
 8001218:	40007000 	.word	0x40007000

0800121c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001220:	b672      	cpsid	i
}
 8001222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <Error_Handler+0x8>

08001228 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	4a0f      	ldr	r2, [pc, #60]	@ (8001274 <HAL_MspInit+0x4c>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800123c:	6453      	str	r3, [r2, #68]	@ 0x44
 800123e:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <HAL_MspInit+0x4c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	4a08      	ldr	r2, [pc, #32]	@ (8001274 <HAL_MspInit+0x4c>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001258:	6413      	str	r3, [r2, #64]	@ 0x40
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_MspInit+0x4c>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <NMI_Handler+0x4>

08001280 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <MemManage_Handler+0x4>

08001290 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <BusFault_Handler+0x4>

08001298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <UsageFault_Handler+0x4>

080012a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ce:	f000 f897 	bl	8001400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <SystemInit+0x20>)
 80012ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ee:	4a05      	ldr	r2, [pc, #20]	@ (8001304 <SystemInit+0x20>)
 80012f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001340 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800130c:	f7ff ffea 	bl	80012e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001310:	480c      	ldr	r0, [pc, #48]	@ (8001344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001312:	490d      	ldr	r1, [pc, #52]	@ (8001348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001314:	4a0d      	ldr	r2, [pc, #52]	@ (800134c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001328:	4c0a      	ldr	r4, [pc, #40]	@ (8001354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001336:	f001 f9bf 	bl	80026b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133a:	f7ff fed5 	bl	80010e8 <main>
  bx  lr    
 800133e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001340:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001348:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800134c:	080027e4 	.word	0x080027e4
  ldr r2, =_sbss
 8001350:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001354:	20000090 	.word	0x20000090

08001358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC_IRQHandler>
	...

0800135c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001360:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0d      	ldr	r2, [pc, #52]	@ (800139c <HAL_Init+0x40>)
 8001366:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800136a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800136c:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <HAL_Init+0x40>)
 8001372:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001378:	4b08      	ldr	r3, [pc, #32]	@ (800139c <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a07      	ldr	r2, [pc, #28]	@ (800139c <HAL_Init+0x40>)
 800137e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001384:	2003      	movs	r0, #3
 8001386:	f000 f931 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800138a:	2000      	movs	r0, #0
 800138c:	f000 f808 	bl	80013a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001390:	f7ff ff4a 	bl	8001228 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023c00 	.word	0x40023c00

080013a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a8:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <HAL_InitTick+0x54>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <HAL_InitTick+0x58>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f93b 	bl	800163a <HAL_SYSTICK_Config>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00e      	b.n	80013ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b0f      	cmp	r3, #15
 80013d2:	d80a      	bhi.n	80013ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d4:	2200      	movs	r2, #0
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f000 f911 	bl	8001602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e0:	4a06      	ldr	r2, [pc, #24]	@ (80013fc <HAL_InitTick+0x5c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e000      	b.n	80013ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000050 	.word	0x20000050
 80013f8:	20000058 	.word	0x20000058
 80013fc:	20000054 	.word	0x20000054

08001400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <HAL_IncTick+0x20>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_IncTick+0x24>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4413      	add	r3, r2
 8001410:	4a04      	ldr	r2, [pc, #16]	@ (8001424 <HAL_IncTick+0x24>)
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000058 	.word	0x20000058
 8001424:	2000008c 	.word	0x2000008c

08001428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return uwTick;
 800142c:	4b03      	ldr	r3, [pc, #12]	@ (800143c <HAL_GetTick+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000008c 	.word	0x2000008c

08001440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff ffee 	bl	8001428 <HAL_GetTick>
 800144c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001458:	d005      	beq.n	8001466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <HAL_Delay+0x44>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001466:	bf00      	nop
 8001468:	f7ff ffde 	bl	8001428 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	429a      	cmp	r2, r3
 8001476:	d8f7      	bhi.n	8001468 <HAL_Delay+0x28>
  {
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000058 	.word	0x20000058

08001488 <__NVIC_SetPriorityGrouping>:
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_GetPriorityGrouping>:
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_SetPriority>:
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	b2da      	uxtb	r2, r3
 8001504:	490c      	ldr	r1, [pc, #48]	@ (8001538 <__NVIC_SetPriority+0x4c>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	0112      	lsls	r2, r2, #4
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4908      	ldr	r1, [pc, #32]	@ (800153c <__NVIC_SetPriority+0x50>)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	3b04      	subs	r3, #4
 8001524:	0112      	lsls	r2, r2, #4
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	@ 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b04      	cmp	r3, #4
 800155c:	bf28      	it	cs
 800155e:	2304      	movcs	r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3304      	adds	r3, #4
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b03      	subs	r3, #3
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43da      	mvns	r2, r3
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	43d9      	mvns	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	4313      	orrs	r3, r2
         );
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	@ 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
	...

080015a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015b8:	d301      	bcc.n	80015be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00f      	b.n	80015de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015be:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <SysTick_Config+0x40>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c6:	210f      	movs	r1, #15
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f7ff ff8e 	bl	80014ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <SysTick_Config+0x40>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <SysTick_Config+0x40>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff47 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001602:	b580      	push	{r7, lr}
 8001604:	b086      	sub	sp, #24
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001614:	f7ff ff5c 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 8001618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6978      	ldr	r0, [r7, #20]
 8001620:	f7ff ff8e 	bl	8001540 <NVIC_EncodePriority>
 8001624:	4602      	mov	r2, r0
 8001626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff5d 	bl	80014ec <__NVIC_SetPriority>
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffb0 	bl	80015a8 <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e267      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d075      	beq.n	800175e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001672:	4b88      	ldr	r3, [pc, #544]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b04      	cmp	r3, #4
 800167c:	d00c      	beq.n	8001698 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800167e:	4b85      	ldr	r3, [pc, #532]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001686:	2b08      	cmp	r3, #8
 8001688:	d112      	bne.n	80016b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168a:	4b82      	ldr	r3, [pc, #520]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001692:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001696:	d10b      	bne.n	80016b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001698:	4b7e      	ldr	r3, [pc, #504]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d05b      	beq.n	800175c <HAL_RCC_OscConfig+0x108>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d157      	bne.n	800175c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e242      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016b8:	d106      	bne.n	80016c8 <HAL_RCC_OscConfig+0x74>
 80016ba:	4b76      	ldr	r3, [pc, #472]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a75      	ldr	r2, [pc, #468]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e01d      	b.n	8001704 <HAL_RCC_OscConfig+0xb0>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0x98>
 80016d2:	4b70      	ldr	r3, [pc, #448]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b6d      	ldr	r3, [pc, #436]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e00b      	b.n	8001704 <HAL_RCC_OscConfig+0xb0>
 80016ec:	4b69      	ldr	r3, [pc, #420]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a68      	ldr	r2, [pc, #416]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 80016f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b66      	ldr	r3, [pc, #408]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a65      	ldr	r2, [pc, #404]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 80016fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d013      	beq.n	8001734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fe8c 	bl	8001428 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001714:	f7ff fe88 	bl	8001428 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b64      	cmp	r3, #100	@ 0x64
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e207      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	4b5b      	ldr	r3, [pc, #364]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0xc0>
 8001732:	e014      	b.n	800175e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fe78 	bl	8001428 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800173c:	f7ff fe74 	bl	8001428 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	@ 0x64
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e1f3      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	4b51      	ldr	r3, [pc, #324]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0xe8>
 800175a:	e000      	b.n	800175e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d063      	beq.n	8001832 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800176a:	4b4a      	ldr	r3, [pc, #296]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00b      	beq.n	800178e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001776:	4b47      	ldr	r3, [pc, #284]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800177e:	2b08      	cmp	r3, #8
 8001780:	d11c      	bne.n	80017bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001782:	4b44      	ldr	r3, [pc, #272]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d116      	bne.n	80017bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	4b41      	ldr	r3, [pc, #260]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d005      	beq.n	80017a6 <HAL_RCC_OscConfig+0x152>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d001      	beq.n	80017a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e1c7      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4937      	ldr	r1, [pc, #220]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	e03a      	b.n	8001832 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d020      	beq.n	8001806 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c4:	4b34      	ldr	r3, [pc, #208]	@ (8001898 <HAL_RCC_OscConfig+0x244>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ca:	f7ff fe2d 	bl	8001428 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d2:	f7ff fe29 	bl	8001428 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e1a8      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f0:	4b28      	ldr	r3, [pc, #160]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	4925      	ldr	r1, [pc, #148]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]
 8001804:	e015      	b.n	8001832 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001806:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <HAL_RCC_OscConfig+0x244>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff fe0c 	bl	8001428 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001814:	f7ff fe08 	bl	8001428 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e187      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001826:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d036      	beq.n	80018ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d016      	beq.n	8001874 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <HAL_RCC_OscConfig+0x248>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184c:	f7ff fdec 	bl	8001428 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001854:	f7ff fde8 	bl	8001428 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e167      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001866:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <HAL_RCC_OscConfig+0x240>)
 8001868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x200>
 8001872:	e01b      	b.n	80018ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001874:	4b09      	ldr	r3, [pc, #36]	@ (800189c <HAL_RCC_OscConfig+0x248>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187a:	f7ff fdd5 	bl	8001428 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001880:	e00e      	b.n	80018a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001882:	f7ff fdd1 	bl	8001428 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d907      	bls.n	80018a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e150      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
 8001894:	40023800 	.word	0x40023800
 8001898:	42470000 	.word	0x42470000
 800189c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a0:	4b88      	ldr	r3, [pc, #544]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80018a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1ea      	bne.n	8001882 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 8097 	beq.w	80019e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018be:	4b81      	ldr	r3, [pc, #516]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10f      	bne.n	80018ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	4b7d      	ldr	r3, [pc, #500]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d2:	4a7c      	ldr	r2, [pc, #496]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018da:	4b7a      	ldr	r3, [pc, #488]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e6:	2301      	movs	r3, #1
 80018e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	4b77      	ldr	r3, [pc, #476]	@ (8001ac8 <HAL_RCC_OscConfig+0x474>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d118      	bne.n	8001928 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f6:	4b74      	ldr	r3, [pc, #464]	@ (8001ac8 <HAL_RCC_OscConfig+0x474>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a73      	ldr	r2, [pc, #460]	@ (8001ac8 <HAL_RCC_OscConfig+0x474>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001902:	f7ff fd91 	bl	8001428 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190a:	f7ff fd8d 	bl	8001428 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e10c      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac8 <HAL_RCC_OscConfig+0x474>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d106      	bne.n	800193e <HAL_RCC_OscConfig+0x2ea>
 8001930:	4b64      	ldr	r3, [pc, #400]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001934:	4a63      	ldr	r2, [pc, #396]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6713      	str	r3, [r2, #112]	@ 0x70
 800193c:	e01c      	b.n	8001978 <HAL_RCC_OscConfig+0x324>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b05      	cmp	r3, #5
 8001944:	d10c      	bne.n	8001960 <HAL_RCC_OscConfig+0x30c>
 8001946:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800194a:	4a5e      	ldr	r2, [pc, #376]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6713      	str	r3, [r2, #112]	@ 0x70
 8001952:	4b5c      	ldr	r3, [pc, #368]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001956:	4a5b      	ldr	r2, [pc, #364]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6713      	str	r3, [r2, #112]	@ 0x70
 800195e:	e00b      	b.n	8001978 <HAL_RCC_OscConfig+0x324>
 8001960:	4b58      	ldr	r3, [pc, #352]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001964:	4a57      	ldr	r2, [pc, #348]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	6713      	str	r3, [r2, #112]	@ 0x70
 800196c:	4b55      	ldr	r3, [pc, #340]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001970:	4a54      	ldr	r2, [pc, #336]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001972:	f023 0304 	bic.w	r3, r3, #4
 8001976:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d015      	beq.n	80019ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001980:	f7ff fd52 	bl	8001428 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001986:	e00a      	b.n	800199e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001988:	f7ff fd4e 	bl	8001428 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e0cb      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199e:	4b49      	ldr	r3, [pc, #292]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0ee      	beq.n	8001988 <HAL_RCC_OscConfig+0x334>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ac:	f7ff fd3c 	bl	8001428 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f7ff fd38 	bl	8001428 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e0b5      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ca:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1ee      	bne.n	80019b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d105      	bne.n	80019e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019dc:	4b39      	ldr	r3, [pc, #228]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	4a38      	ldr	r2, [pc, #224]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80019e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 80a1 	beq.w	8001b34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019f2:	4b34      	ldr	r3, [pc, #208]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d05c      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d141      	bne.n	8001a8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a06:	4b31      	ldr	r3, [pc, #196]	@ (8001acc <HAL_RCC_OscConfig+0x478>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fd0c 	bl	8001428 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7ff fd08 	bl	8001428 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e087      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a26:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69da      	ldr	r2, [r3, #28]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a40:	019b      	lsls	r3, r3, #6
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a48:	085b      	lsrs	r3, r3, #1
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	041b      	lsls	r3, r3, #16
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a54:	061b      	lsls	r3, r3, #24
 8001a56:	491b      	ldr	r1, [pc, #108]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <HAL_RCC_OscConfig+0x478>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a62:	f7ff fce1 	bl	8001428 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6a:	f7ff fcdd 	bl	8001428 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e05c      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x416>
 8001a88:	e054      	b.n	8001b34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <HAL_RCC_OscConfig+0x478>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fcca 	bl	8001428 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff fcc6 	bl	8001428 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e045      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_RCC_OscConfig+0x470>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x444>
 8001ab6:	e03d      	b.n	8001b34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e038      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40007000 	.word	0x40007000
 8001acc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <HAL_RCC_OscConfig+0x4ec>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d028      	beq.n	8001b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d121      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d11a      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b00:	4013      	ands	r3, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d111      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b16:	085b      	lsrs	r3, r3, #1
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d107      	bne.n	8001b30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d001      	beq.n	8001b34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800

08001b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0cc      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b58:	4b68      	ldr	r3, [pc, #416]	@ (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d90c      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b66:	4b65      	ldr	r3, [pc, #404]	@ (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b63      	ldr	r3, [pc, #396]	@ (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0b8      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d020      	beq.n	8001bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b98:	4b59      	ldr	r3, [pc, #356]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	4a58      	ldr	r2, [pc, #352]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ba2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb0:	4b53      	ldr	r3, [pc, #332]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4a52      	ldr	r2, [pc, #328]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bbc:	4b50      	ldr	r3, [pc, #320]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	494d      	ldr	r1, [pc, #308]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d044      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	4b47      	ldr	r3, [pc, #284]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d119      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e07f      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d003      	beq.n	8001c02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c02:	4b3f      	ldr	r3, [pc, #252]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d109      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e06f      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c12:	4b3b      	ldr	r3, [pc, #236]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e067      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c22:	4b37      	ldr	r3, [pc, #220]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f023 0203 	bic.w	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4934      	ldr	r1, [pc, #208]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c34:	f7ff fbf8 	bl	8001428 <HAL_GetTick>
 8001c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3c:	f7ff fbf4 	bl	8001428 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e04f      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	4b2b      	ldr	r3, [pc, #172]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 020c 	and.w	r2, r3, #12
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d1eb      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c64:	4b25      	ldr	r3, [pc, #148]	@ (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d20c      	bcs.n	8001c8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c72:	4b22      	ldr	r3, [pc, #136]	@ (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <HAL_RCC_ClockConfig+0x1b8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e032      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c98:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4916      	ldr	r1, [pc, #88]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb6:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	490e      	ldr	r1, [pc, #56]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cca:	f000 f821 	bl	8001d10 <HAL_RCC_GetSysClockFreq>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	490a      	ldr	r1, [pc, #40]	@ (8001d04 <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	5ccb      	ldrb	r3, [r1, r3]
 8001cde:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce2:	4a09      	ldr	r2, [pc, #36]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ce6:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fb58 	bl	80013a0 <HAL_InitTick>

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023c00 	.word	0x40023c00
 8001d00:	40023800 	.word	0x40023800
 8001d04:	080027bc 	.word	0x080027bc
 8001d08:	20000050 	.word	0x20000050
 8001d0c:	20000054 	.word	0x20000054

08001d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d14:	b094      	sub	sp, #80	@ 0x50
 8001d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d28:	4b79      	ldr	r3, [pc, #484]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d00d      	beq.n	8001d50 <HAL_RCC_GetSysClockFreq+0x40>
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	f200 80e1 	bhi.w	8001efc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0x34>
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d003      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d42:	e0db      	b.n	8001efc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d44:	4b73      	ldr	r3, [pc, #460]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d48:	e0db      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d4a:	4b73      	ldr	r3, [pc, #460]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d4e:	e0d8      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d50:	4b6f      	ldr	r3, [pc, #444]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d58:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d5a:	4b6d      	ldr	r3, [pc, #436]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d063      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d66:	4b6a      	ldr	r3, [pc, #424]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	099b      	lsrs	r3, r3, #6
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d78:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d82:	4622      	mov	r2, r4
 8001d84:	462b      	mov	r3, r5
 8001d86:	f04f 0000 	mov.w	r0, #0
 8001d8a:	f04f 0100 	mov.w	r1, #0
 8001d8e:	0159      	lsls	r1, r3, #5
 8001d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d94:	0150      	lsls	r0, r2, #5
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	1a51      	subs	r1, r2, r1
 8001d9e:	6139      	str	r1, [r7, #16]
 8001da0:	4629      	mov	r1, r5
 8001da2:	eb63 0301 	sbc.w	r3, r3, r1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001db4:	4659      	mov	r1, fp
 8001db6:	018b      	lsls	r3, r1, #6
 8001db8:	4651      	mov	r1, sl
 8001dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dbe:	4651      	mov	r1, sl
 8001dc0:	018a      	lsls	r2, r1, #6
 8001dc2:	4651      	mov	r1, sl
 8001dc4:	ebb2 0801 	subs.w	r8, r2, r1
 8001dc8:	4659      	mov	r1, fp
 8001dca:	eb63 0901 	sbc.w	r9, r3, r1
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001de2:	4690      	mov	r8, r2
 8001de4:	4699      	mov	r9, r3
 8001de6:	4623      	mov	r3, r4
 8001de8:	eb18 0303 	adds.w	r3, r8, r3
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	462b      	mov	r3, r5
 8001df0:	eb49 0303 	adc.w	r3, r9, r3
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e02:	4629      	mov	r1, r5
 8001e04:	024b      	lsls	r3, r1, #9
 8001e06:	4621      	mov	r1, r4
 8001e08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e0c:	4621      	mov	r1, r4
 8001e0e:	024a      	lsls	r2, r1, #9
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e16:	2200      	movs	r2, #0
 8001e18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e20:	f7fe f9d8 	bl	80001d4 <__aeabi_uldivmod>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4613      	mov	r3, r2
 8001e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e2c:	e058      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2e:	4b38      	ldr	r3, [pc, #224]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	099b      	lsrs	r3, r3, #6
 8001e34:	2200      	movs	r2, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	4611      	mov	r1, r2
 8001e3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e3e:	623b      	str	r3, [r7, #32]
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e48:	4642      	mov	r2, r8
 8001e4a:	464b      	mov	r3, r9
 8001e4c:	f04f 0000 	mov.w	r0, #0
 8001e50:	f04f 0100 	mov.w	r1, #0
 8001e54:	0159      	lsls	r1, r3, #5
 8001e56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e5a:	0150      	lsls	r0, r2, #5
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4641      	mov	r1, r8
 8001e62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e66:	4649      	mov	r1, r9
 8001e68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e80:	ebb2 040a 	subs.w	r4, r2, sl
 8001e84:	eb63 050b 	sbc.w	r5, r3, fp
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	00eb      	lsls	r3, r5, #3
 8001e92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e96:	00e2      	lsls	r2, r4, #3
 8001e98:	4614      	mov	r4, r2
 8001e9a:	461d      	mov	r5, r3
 8001e9c:	4643      	mov	r3, r8
 8001e9e:	18e3      	adds	r3, r4, r3
 8001ea0:	603b      	str	r3, [r7, #0]
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	eb45 0303 	adc.w	r3, r5, r3
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	028b      	lsls	r3, r1, #10
 8001eba:	4621      	mov	r1, r4
 8001ebc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	028a      	lsls	r2, r1, #10
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	61fa      	str	r2, [r7, #28]
 8001ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ed4:	f7fe f97e 	bl	80001d4 <__aeabi_uldivmod>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4613      	mov	r3, r2
 8001ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	3301      	adds	r3, #1
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ef0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001efa:	e002      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001efc:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001efe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3750      	adds	r7, #80	@ 0x50
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	00f42400 	.word	0x00f42400
 8001f18:	007a1200 	.word	0x007a1200

08001f1c <LL_ADC_REG_SetSequencerLength>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_ADC_IsEnabled>:
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	bf0c      	ite	eq
 8001f56:	2301      	moveq	r3, #1
 8001f58:	2300      	movne	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ffe3 	bl	8001f42 <LL_ADC_IsEnabled>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d117      	bne.n	8001fb2 <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001f8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	6811      	ldr	r1, [r2, #0]
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	6892      	ldr	r2, [r2, #8]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	605a      	str	r2, [r3, #4]
               ,
               ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );

    MODIFY_REG(ADCx->CR2,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	e001      	b.n	8001fb6 <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff ffb7 	bl	8001f42 <LL_ADC_IsEnabled>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d12b      	bne.n	8002032 <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	e005      	b.n	8002002 <LL_ADC_REG_Init+0x42>
                 ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	605a      	str	r2, [r3, #4]
                 ,
                 LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }

    MODIFY_REG(ADCx->CR2,
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <LL_ADC_REG_Init+0x80>)
 8002008:	4013      	ands	r3, r2
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	f002 6170 	and.w	r1, r2, #251658240	@ 0xf000000
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	68d2      	ldr	r2, [r2, #12]
 8002016:	4311      	orrs	r1, r2
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	6912      	ldr	r2, [r2, #16]
 800201c:	430a      	orrs	r2, r1
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4619      	mov	r1, r3
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff ff76 	bl	8001f1c <LL_ADC_REG_SetSequencerLength>
 8002030:	e001      	b.n	8002036 <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002036:	7bfb      	ldrb	r3, [r7, #15]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	c0fffcfd 	.word	0xc0fffcfd

08002044 <LL_DMA_ConfigTransfer>:
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR,
 8002050:	4a0e      	ldr	r2, [pc, #56]	@ (800208c <LL_DMA_ConfigTransfer+0x48>)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	4413      	add	r3, r2
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4413      	add	r3, r2
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f423 335f 	bic.w	r3, r3, #228352	@ 0x37c00
 8002064:	f423 7378 	bic.w	r3, r3, #992	@ 0x3e0
 8002068:	4908      	ldr	r1, [pc, #32]	@ (800208c <LL_DMA_ConfigTransfer+0x48>)
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	440a      	add	r2, r1
 800206e:	7812      	ldrb	r2, [r2, #0]
 8002070:	4611      	mov	r1, r2
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	440a      	add	r2, r1
 8002076:	4611      	mov	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	080027cc 	.word	0x080027cc

08002090 <LL_DMA_SetDataLength>:
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 800209c:	4a0d      	ldr	r2, [pc, #52]	@ (80020d4 <LL_DMA_SetDataLength+0x44>)
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	4413      	add	r3, r2
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4413      	add	r3, r2
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	0c1b      	lsrs	r3, r3, #16
 80020ae:	041b      	lsls	r3, r3, #16
 80020b0:	4908      	ldr	r1, [pc, #32]	@ (80020d4 <LL_DMA_SetDataLength+0x44>)
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	440a      	add	r2, r1
 80020b6:	7812      	ldrb	r2, [r2, #0]
 80020b8:	4611      	mov	r1, r2
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	440a      	add	r2, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	080027cc 	.word	0x080027cc

080020d8 <LL_DMA_SetChannelSelection>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80020e4:	4a0d      	ldr	r2, [pc, #52]	@ (800211c <LL_DMA_SetChannelSelection+0x44>)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	4413      	add	r3, r2
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4413      	add	r3, r2
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80020f8:	4908      	ldr	r1, [pc, #32]	@ (800211c <LL_DMA_SetChannelSelection+0x44>)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	440b      	add	r3, r1
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	440b      	add	r3, r1
 8002106:	4619      	mov	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	080027cc 	.word	0x080027cc

08002120 <LL_DMA_SetMemoryBurstxfer>:
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MBURST, Mburst);
 800212c:	4a0d      	ldr	r2, [pc, #52]	@ (8002164 <LL_DMA_SetMemoryBurstxfer+0x44>)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	4413      	add	r3, r2
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4413      	add	r3, r2
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f023 72c0 	bic.w	r2, r3, #25165824	@ 0x1800000
 8002140:	4908      	ldr	r1, [pc, #32]	@ (8002164 <LL_DMA_SetMemoryBurstxfer+0x44>)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	440b      	add	r3, r1
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	440b      	add	r3, r1
 800214e:	4619      	mov	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	080027cc 	.word	0x080027cc

08002168 <LL_DMA_SetPeriphBurstxfer>:
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PBURST, Pburst);
 8002174:	4a0d      	ldr	r2, [pc, #52]	@ (80021ac <LL_DMA_SetPeriphBurstxfer+0x44>)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4413      	add	r3, r2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4413      	add	r3, r2
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f423 02c0 	bic.w	r2, r3, #6291456	@ 0x600000
 8002188:	4908      	ldr	r1, [pc, #32]	@ (80021ac <LL_DMA_SetPeriphBurstxfer+0x44>)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	440b      	add	r3, r1
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	440b      	add	r3, r1
 8002196:	4619      	mov	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	080027cc 	.word	0x080027cc

080021b0 <LL_DMA_ConfigFifo>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_FTH|DMA_SxFCR_DMDIS, FifoMode|FifoThreshold);
 80021be:	4a0e      	ldr	r2, [pc, #56]	@ (80021f8 <LL_DMA_ConfigFifo+0x48>)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4413      	add	r3, r2
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4413      	add	r3, r2
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f023 0207 	bic.w	r2, r3, #7
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	430b      	orrs	r3, r1
 80021d8:	4807      	ldr	r0, [pc, #28]	@ (80021f8 <LL_DMA_ConfigFifo+0x48>)
 80021da:	68b9      	ldr	r1, [r7, #8]
 80021dc:	4401      	add	r1, r0
 80021de:	7809      	ldrb	r1, [r1, #0]
 80021e0:	4608      	mov	r0, r1
 80021e2:	68f9      	ldr	r1, [r7, #12]
 80021e4:	4401      	add	r1, r0
 80021e6:	4313      	orrs	r3, r2
 80021e8:	614b      	str	r3, [r1, #20]
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	080027cc 	.word	0x080027cc

080021fc <LL_DMA_SetMemoryAddress>:
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8002208:	4a07      	ldr	r2, [pc, #28]	@ (8002228 <LL_DMA_SetMemoryAddress+0x2c>)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	4413      	add	r3, r2
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4413      	add	r3, r2
 8002216:	461a      	mov	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	60d3      	str	r3, [r2, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	080027cc 	.word	0x080027cc

0800222c <LL_DMA_SetPeriphAddress>:
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8002238:	4a07      	ldr	r2, [pc, #28]	@ (8002258 <LL_DMA_SetPeriphAddress+0x2c>)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4413      	add	r3, r2
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4413      	add	r3, r2
 8002246:	461a      	mov	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6093      	str	r3, [r2, #8]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	080027cc 	.word	0x080027cc

0800225c <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Stream, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_SxCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_SxCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_SxCR_MSIZE[1:0] bits
   * - Priority:               DMA_SxCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Stream, DMA_InitStruct->Direction | \
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                    | \
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Stream, DMA_InitStruct->Direction | \
 8002270:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode   | \
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                    | \
 8002276:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode   | \
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode   | \
 800227c:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize  | \
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode   | \
 8002282:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize  | \
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize  | \
 8002288:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_DMA_ConfigTransfer(DMAx, Stream, DMA_InitStruct->Direction | \
 800228e:	4313      	orrs	r3, r2
 8002290:	461a      	mov	r2, r3
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f7ff fed5 	bl	8002044 <LL_DMA_ConfigTransfer>
                        );

  if(DMA_InitStruct->FIFOMode != LL_DMA_FIFOMODE_DISABLE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d015      	beq.n	80022ce <LL_DMA_Init+0x72>
    /*---------------------------- DMAx SxFCR Configuration ------------------------
     * Configure DMAx_Streamy:  fifo mode and fifo threshold with parameters :
     * - FIFOMode:                DMA_SxFCR_DMDIS bit
     * - FIFOThreshold:           DMA_SxFCR_FTH[1:0] bits
     */
    LL_DMA_ConfigFifo(DMAx, Stream, DMA_InitStruct->FIFOMode, DMA_InitStruct->FIFOThreshold);   
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f7ff ff7f 	bl	80021b0 <LL_DMA_ConfigFifo>

    /*---------------------------- DMAx SxCR Configuration --------------------------
     * Configure DMAx_Streamy:  memory burst transfer with parameters :
     * - MemBurst:                DMA_SxCR_MBURST[1:0] bits
     */
    LL_DMA_SetMemoryBurstxfer(DMAx,Stream,DMA_InitStruct->MemBurst); 
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b6:	461a      	mov	r2, r3
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7ff ff30 	bl	8002120 <LL_DMA_SetMemoryBurstxfer>

    /*---------------------------- DMAx SxCR Configuration --------------------------
     * Configure DMAx_Streamy:  peripheral burst transfer with parameters :
     * - PeriphBurst:             DMA_SxCR_PBURST[1:0] bits
     */
    LL_DMA_SetPeriphBurstxfer(DMAx,Stream,DMA_InitStruct->PeriphBurst);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c4:	461a      	mov	r2, r3
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f7ff ff4d 	bl	8002168 <LL_DMA_SetPeriphBurstxfer>

  /*-------------------------- DMAx SxM0AR Configuration --------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress:     DMA_SxM0AR_M0A[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Stream, DMA_InitStruct->MemoryOrM2MDstAddress);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f7ff ff90 	bl	80021fc <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx SxPAR Configuration ---------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress:     DMA_SxPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Stream, DMA_InitStruct->PeriphOrM2MSrcAddress);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f7ff ffa1 	bl	800222c <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx SxNDTR Configuration -------------------------
   * Configure the peripheral base address with parameter :
   * - NbData:                    DMA_SxNDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Stream, DMA_InitStruct->NbData);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7ff fecc 	bl	8002090 <LL_DMA_SetDataLength>

  /*--------------------------- DMA SxCR_CHSEL Configuration ----------------------
   * Configure the peripheral base address with parameter :
   * - PeriphRequest:             DMA_SxCR_CHSEL[2:0] bits
   */
  LL_DMA_SetChannelSelection(DMAx, Stream, DMA_InitStruct->Channel);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fc:	461a      	mov	r2, r3
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7ff fee9 	bl	80020d8 <LL_DMA_SetChannelSelection>

  return SUCCESS;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <LL_GPIO_SetPinMode>:
{
 8002310:	b480      	push	{r7}
 8002312:	b08b      	sub	sp, #44	@ 0x2c
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	613b      	str	r3, [r7, #16]
  return result;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002336:	2320      	movs	r3, #32
 8002338:	e003      	b.n	8002342 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	fab3 f383 	clz	r3, r3
 8002340:	b2db      	uxtb	r3, r3
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2103      	movs	r1, #3
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	401a      	ands	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	61fb      	str	r3, [r7, #28]
  return result;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e003      	b.n	8002370 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	fa01 f303 	lsl.w	r3, r1, r3
 8002378:	431a      	orrs	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	601a      	str	r2, [r3, #0]
}
 800237e:	bf00      	nop
 8002380:	372c      	adds	r7, #44	@ 0x2c
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <LL_GPIO_SetPinOutputType>:
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	60f8      	str	r0, [r7, #12]
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	43db      	mvns	r3, r3
 800239e:	401a      	ands	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	431a      	orrs	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	605a      	str	r2, [r3, #4]
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <LL_GPIO_SetPinSpeed>:
{
 80023ba:	b480      	push	{r7}
 80023bc:	b08b      	sub	sp, #44	@ 0x2c
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	613b      	str	r3, [r7, #16]
  return result;
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80023e0:	2320      	movs	r3, #32
 80023e2:	e003      	b.n	80023ec <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2103      	movs	r1, #3
 80023f0:	fa01 f303 	lsl.w	r3, r1, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	401a      	ands	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	61fb      	str	r3, [r7, #28]
  return result;
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800240e:	2320      	movs	r3, #32
 8002410:	e003      	b.n	800241a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	431a      	orrs	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	609a      	str	r2, [r3, #8]
}
 8002428:	bf00      	nop
 800242a:	372c      	adds	r7, #44	@ 0x2c
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_GPIO_SetPinPull>:
{
 8002434:	b480      	push	{r7}
 8002436:	b08b      	sub	sp, #44	@ 0x2c
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	68da      	ldr	r2, [r3, #12]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	613b      	str	r3, [r7, #16]
  return result;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800245a:	2320      	movs	r3, #32
 800245c:	e003      	b.n	8002466 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2103      	movs	r1, #3
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	401a      	ands	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	61fb      	str	r3, [r7, #28]
  return result;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002488:	2320      	movs	r3, #32
 800248a:	e003      	b.n	8002494 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	60da      	str	r2, [r3, #12]
}
 80024a2:	bf00      	nop
 80024a4:	372c      	adds	r7, #44	@ 0x2c
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <LL_GPIO_SetAFPin_0_7>:
{
 80024ae:	b480      	push	{r7}
 80024b0:	b08b      	sub	sp, #44	@ 0x2c
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a1a      	ldr	r2, [r3, #32]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	613b      	str	r3, [r7, #16]
  return result;
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80024d4:	2320      	movs	r3, #32
 80024d6:	e003      	b.n	80024e0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	210f      	movs	r1, #15
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	401a      	ands	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	61fb      	str	r3, [r7, #28]
  return result;
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002502:	2320      	movs	r3, #32
 8002504:	e003      	b.n	800250e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	fa01 f303 	lsl.w	r3, r1, r3
 8002516:	431a      	orrs	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	621a      	str	r2, [r3, #32]
}
 800251c:	bf00      	nop
 800251e:	372c      	adds	r7, #44	@ 0x2c
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_GPIO_SetAFPin_8_15>:
{
 8002528:	b480      	push	{r7}
 800252a:	b08b      	sub	sp, #44	@ 0x2c
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	0a1b      	lsrs	r3, r3, #8
 800253c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	613b      	str	r3, [r7, #16]
  return result;
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002550:	2320      	movs	r3, #32
 8002552:	e003      	b.n	800255c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	210f      	movs	r1, #15
 8002560:	fa01 f303 	lsl.w	r3, r1, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	401a      	ands	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	61fb      	str	r3, [r7, #28]
  return result;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002580:	2320      	movs	r3, #32
 8002582:	e003      	b.n	800258c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	fab3 f383 	clz	r3, r3
 800258a:	b2db      	uxtb	r3, r3
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	fa01 f303 	lsl.w	r3, r1, r3
 8002594:	431a      	orrs	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800259a:	bf00      	nop
 800259c:	372c      	adds	r7, #44	@ 0x2c
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b08a      	sub	sp, #40	@ 0x28
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	617b      	str	r3, [r7, #20]
  return result;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <LL_GPIO_Init+0x2e>
    return 32U;
 80025d0:	2320      	movs	r3, #32
 80025d2:	e003      	b.n	80025dc <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80025de:	e057      	b.n	8002690 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2101      	movs	r1, #1
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	4013      	ands	r3, r2
 80025ee:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d049      	beq.n	800268a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d003      	beq.n	8002606 <LL_GPIO_Init+0x60>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d10d      	bne.n	8002622 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	461a      	mov	r2, r3
 800260c:	6a39      	ldr	r1, [r7, #32]
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff fed3 	bl	80023ba <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	461a      	mov	r2, r3
 800261a:	6a39      	ldr	r1, [r7, #32]
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff feb4 	bl	800238a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	461a      	mov	r2, r3
 8002628:	6a39      	ldr	r1, [r7, #32]
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff ff02 	bl	8002434 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d121      	bne.n	800267c <LL_GPIO_Init+0xd6>
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	60bb      	str	r3, [r7, #8]
  return result;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <LL_GPIO_Init+0xac>
    return 32U;
 800264e:	2320      	movs	r3, #32
 8002650:	e003      	b.n	800265a <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800265a:	2b07      	cmp	r3, #7
 800265c:	d807      	bhi.n	800266e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	461a      	mov	r2, r3
 8002664:	6a39      	ldr	r1, [r7, #32]
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ff21 	bl	80024ae <LL_GPIO_SetAFPin_0_7>
 800266c:	e006      	b.n	800267c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	461a      	mov	r2, r3
 8002674:	6a39      	ldr	r1, [r7, #32]
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff ff56 	bl	8002528 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	461a      	mov	r2, r3
 8002682:	6a39      	ldr	r1, [r7, #32]
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff fe43 	bl	8002310 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	3301      	adds	r3, #1
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	fa22 f303 	lsr.w	r3, r2, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1a0      	bne.n	80025e0 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3728      	adds	r7, #40	@ 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <memset>:
 80026a8:	4402      	add	r2, r0
 80026aa:	4603      	mov	r3, r0
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d100      	bne.n	80026b2 <memset+0xa>
 80026b0:	4770      	bx	lr
 80026b2:	f803 1b01 	strb.w	r1, [r3], #1
 80026b6:	e7f9      	b.n	80026ac <memset+0x4>

080026b8 <__libc_init_array>:
 80026b8:	b570      	push	{r4, r5, r6, lr}
 80026ba:	4d0d      	ldr	r5, [pc, #52]	@ (80026f0 <__libc_init_array+0x38>)
 80026bc:	4c0d      	ldr	r4, [pc, #52]	@ (80026f4 <__libc_init_array+0x3c>)
 80026be:	1b64      	subs	r4, r4, r5
 80026c0:	10a4      	asrs	r4, r4, #2
 80026c2:	2600      	movs	r6, #0
 80026c4:	42a6      	cmp	r6, r4
 80026c6:	d109      	bne.n	80026dc <__libc_init_array+0x24>
 80026c8:	4d0b      	ldr	r5, [pc, #44]	@ (80026f8 <__libc_init_array+0x40>)
 80026ca:	4c0c      	ldr	r4, [pc, #48]	@ (80026fc <__libc_init_array+0x44>)
 80026cc:	f000 f818 	bl	8002700 <_init>
 80026d0:	1b64      	subs	r4, r4, r5
 80026d2:	10a4      	asrs	r4, r4, #2
 80026d4:	2600      	movs	r6, #0
 80026d6:	42a6      	cmp	r6, r4
 80026d8:	d105      	bne.n	80026e6 <__libc_init_array+0x2e>
 80026da:	bd70      	pop	{r4, r5, r6, pc}
 80026dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e0:	4798      	blx	r3
 80026e2:	3601      	adds	r6, #1
 80026e4:	e7ee      	b.n	80026c4 <__libc_init_array+0xc>
 80026e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ea:	4798      	blx	r3
 80026ec:	3601      	adds	r6, #1
 80026ee:	e7f2      	b.n	80026d6 <__libc_init_array+0x1e>
 80026f0:	080027dc 	.word	0x080027dc
 80026f4:	080027dc 	.word	0x080027dc
 80026f8:	080027dc 	.word	0x080027dc
 80026fc:	080027e0 	.word	0x080027e0

08002700 <_init>:
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002702:	bf00      	nop
 8002704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002706:	bc08      	pop	{r3}
 8002708:	469e      	mov	lr, r3
 800270a:	4770      	bx	lr

0800270c <_fini>:
 800270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270e:	bf00      	nop
 8002710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002712:	bc08      	pop	{r3}
 8002714:	469e      	mov	lr, r3
 8002716:	4770      	bx	lr
